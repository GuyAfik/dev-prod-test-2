args:
- description: Name of Integration
  name: integration_name
  required: true
- description: Name of integration instance
  name: integration_instance_name
commonfields:
  id: CheckPANWIoTIntegrationLicense
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CheckPANWIoTIntegrationLicense
outputs:
- contextPath: "yes"
  description: License is available
- contextPath: "no"
  description: License limit exceeded
pswd: ""
runas: DBotWeakRole
runonce: false
script: "register_module_line('CheckPANWIoTIntegrationLicense', 'start', __line__())\n\n\n\n\n\n\n#PANW_IOT_INSTANCE
  = \"PANW IoT 3rd Party Integration Instance\"\nINTEGRATION_MAP = {\n  \"PANW IoT
  3rd Party Integration - Syslog Sender\": \"siem\",\n  \"siem\": \"PANW IoT 3rd Party
  Integration - Syslog Sender\",\n\n  \"PANW IoT 3rd Party Integration - Tenable.io\":
  \"tenable\",\n  \"tenable\": \"PANW IoT 3rd Party Integration - Tenable.io\",\n\n
  \ \"PANW IoT 3rd Party Integration - Cisco ISE\": \"ise\",\n  \"ise\": \"PANW IoT
  3rd Party Integration - Cisco ISE\",\n\n  \"PANW IoT 3rd Party Integration - AIMS\":
  \"aims\",\n  \"aims\": \"PANW IoT 3rd Party Integration - AIMS\",\n\n  \"PANW IoT
  3rd Party Integration - Nuvolo\": \"nuvolo\",\n  \"nuvolo\": \"PANW IoT 3rd Party
  Integration - Nuvolo\",\n\n  \"PANW IoT 3rd Party Integration - Cisco Prime\": \"cisco_prime\",\n
  \ \"cisco_prime\": \"PANW IoT 3rd Party Integration - Cisco Prime\",\n\n  \"PANW
  IoT 3rd Party Integration - cisco-dnac-IoT\": \"cisco_dnac\",\n  \"cisco_dnac\":
  \"PANW IoT 3rd Party Integration - cisco-dnac-IoT\",\n\n  \"PANW IoT 3rd Party Integration
  - SNMP\": \"snmp\",\n  \"snmp\": \"PANW IoT 3rd Party Integration - SNMP\",\n\n
  \ \"PANW IoT 3rd Party Integration - Qualys\": \"qualys\",\n  \"qualys\": \"PANW
  IoT 3rd Party Integration - Qualys\",\n\n  \"PANW IoT 3rd Party Integration - Aruba
  ClearPass\": \"clearpass\",\n  \"clearpass\": \"PANW IoT 3rd Party Integration -
  Aruba ClearPass\",\n\n  \"PANW IoT 3rd Party Integration - ServiceNow v2\" : \"servicenow\",\n
  \ \"servicenow\": \"PANW IoT 3rd Party Integration - ServiceNow v2\",\n\n  \"PANW
  IoT 3rd Party Integration - Rapid7 Nexpose\" : \"rapid7\",\n  \"rapid7\": \"PANW
  IoT 3rd Party Integration - Rapid7 Nexpose\",\n\n  \"PANW IoT 3rd Party Integration
  - Cisco ISE pxGrid\" : \"pxgrid\",\n  \"pxgrid\": \"PANW IoT 3rd Party Integration
  - Cisco ISE pxGrid\",\n\n  \"PANW IoT 3rd Party Integration - Aruba WLAN Controller\"
  : \"aruba_wlc\",\n  \"aruba_wlc\": \"PANW IoT 3rd Party Integration - Aruba WLAN
  Controller\",\n\n  \"PANW IoT 3rd Party Integration - Aruba Central\" : \"aruba_central\",\n
  \ \"aruba_central\": \"PANW IoT 3rd Party Integration - Aruba Central\",\n\n  \"PANW
  IoT 3rd Party Integration - Cisco WLAN Controller\" : \"cisco_wlc\",\n  \"cisco_wlc\":
  \"PANW IoT 3rd Party Integration - Cisco WLAN Controller\",\n\n  \"PANW IoT 3rd
  Party Integration - Forescout\": \"forescout\",\n  \"forescout\": \"PANW IoT 3rd
  Party Integration - Forescout\",\n\n  \"PANW IoT 3rd Party Integration - Cortex
  XDR - IR\": \"cortex_xdr\",\n  \"cortex_xdr\": \"PANW IoT 3rd Party Integration
  - Cortex XDR - IR\",\n\n  \"PANW IoT 3rd Party Integration - Microsoft SCCM\": \"sccm\",\n
  \ \"sccm\": \"PANW IoT 3rd Party Integration - Microsoft SCCM\",\n\n  \"PANW IoT
  3rd Party Integration - CrowdstrikeFalcon\": \"crowdstrike_falcon\",\n  \"crowdstrike_falcon\":
  \"PANW IoT 3rd Party Integration - CrowdstrikeFalcon\",\n\n  \"PANW IoT 3rd Party
  Integration - Network Discovery\": \"network_discovery\",\n  \"network_discovery\":
  \"PANW IoT 3rd Party Integration - Network Discovery\",\n\n  \"PANW IoT 3rd Party
  Integration - BlueCat IPAM\": \"ipam_bluecat\",\n  \"ipam_bluecat\": \"PANW IoT
  3rd Party Integration - BlueCat IPAM\",\n #infoblox display name is PANW IoT 3rd
  Party Integration - Infoblox IPAM but the integration name is Infoblox IPAM. Please
  dont change it\n  \"Infoblox IPAM\": \"infoblox_ipam\",\n  \"infoblox_ipam\": \"Infoblox
  IPAM\",\n\n  \"PANW IoT 3rd Party Integration - Panorama\": \"panorama\",\n  \"panorama\":\"PANW
  IoT 3rd Party Integration - Panorama\",\n\n  \"PANW IoT 3rd Party Integration -
  Tanium\": \"tanium\",\n  \"tanium\":\"PANW IoT 3rd Party Integration - Tanium\",\n\n
  \ \"PANW IoT 3rd Party Integration - Rockwell AssetCentre\":\"rockwell\",\n  \"rockwell\":\"PANW
  IoT 3rd Party Integration - Rockwell AssetCentre\",\n\n  \"PANW IoT 3rd Party Integration
  - MS Defender XDR\":\"microsoft_defender_xdr\",\n  \"microsoft_defender_xdr\": \"PANW
  IoT 3rd Party Integration - MS Defender XDR\", # used in bulkupdate\n  \"ms_defender_xdr\":
  \"PANW IoT 3rd Party Integration - MS Defender XDR\",  # used in license/status/vulnerabilityUpdate\n\n
  \ \"PANW IoT 3rd Party Integration - Aruba AirWave\": \"aruba_airwave\",\n  \"aruba_airwave\":
  \"PANW IoT 3rd Party Integration - Aruba AirWave\",\n\n  \"PANW IoT 3rd Party Integration
  - Asset Attribute Polling\":\"device_polling\",\n  \"device_polling\":\"PANW IoT
  3rd Party Integration - Asset Attribute Polling\",\n\n  \"PANW IoT 3rd Party Integration
  - Cisco Meraki Cloud\":\"cisco_meraki\",\n  \"cisco_meraki\":\"PANW IoT 3rd Party
  Integration - Cisco Meraki Cloud\",\n\n  \"Splunk\":\"splunk\",\n  \"splunk\":\"Splunk\",\n\n
  \ # this name is used for both ipam and udt solarwinds. Display name is modified
  to Solarwinds Orion\n  \"solarwinds_udt\": \"Solarwinds UDT\",\n  \"PANW IoT 3rd
  Party Integration - SolarWinds UDT\":\"solarwinds_udt\",\n  \n  \"ms_entra_id\":
  \"PANW IoT 3rd Party Integration - MS Entra ID\",\n  \"PANW IoT 3rd Party Integration
  - MS Entra ID\": \"ms_entra_id\",\n}\n\ndef isInstanceActive(instance_name):\n    brand_name
  = \"PANW IoT 3rd Party Integration - Cisco ISE\"\n    all_instances = demisto.getModules()\n\n
  \   for instance in all_instances:\n        if instance == instance_name and all_instances[instance]['brand']
  == brand_name and all_instances[instance]['state'] == 'active':\n            return
  True\n    return False\n\ndef send_status_to_panw_iot_cloud(integration, instance,
  status):\n    cmd_args = {\n        \"status\": status,\n        \"message\": \"License
  Available. Integration is Active\",\n        \"integration_name\": integration,\n
  \       \"playbook_name\": \"None\",\n        \"asset_type\": 'device',\n        \"timestamp\":
  int(round(time.time() * 1000))\n        #\"using\": PANW_IOT_INSTANCE\n    }\n    if
  instance is not None:\n        cmd_args['custom_integration_name'] = instance\n
  \   resp = demisto.executeCommand(\"panw-iot-3rd-party-report-status-to-panw\",
  cmd_args)\n\n    if isError(resp[0]):\n        err_msg = f'Error, failed to send
  status to PANW IoT Cloud - {resp[0].get(\"Contents\")}'\n        raise Exception(err_msg)\n\ndef
  update_outdated_status():\n    try:\n        base_res = demisto.executeCommand(\"panw-iot-3rd-party-get-active-integrations\",
  {}) #, {\"using\": PANW_IOT_INSTANCE})\n        if isError(base_res[0]):\n        \tcontent
  = base_res[0]['Contents']\n        \treturn f\"Failed to get active integrations
  from PANW IoT Cloud: {content}\"\n    except Exception as ex:\n        return str(ex)\n
  \   active_integrations = base_res[0]['Contents']['active_integrations']\n    max_integrations
  = base_res[0]['Contents']['max_integrations']\n    if type(active_integrations)
  == list and len(active_integrations) > 0:\n        for integration in active_integrations:\n
  \           # None XSOAR Based Integration. servicenow_graph_connector also requires
  3P Addon\n            if integration == \"servicenow_graph_connector\":\n                continue
  \n            allInstances = demisto.getModules()\n            brandName = INTEGRATION_MAP.get(integration,
  None)\n            if brandName == None:\n                return f\"{integration}
  doesn't exist in the Integration mapping list\"\n            brandName = INTEGRATION_MAP[integration]\n
  \           brandInstances = [instanceName for instanceName in allInstances if allInstances[instanceName]['brand'].lower()
  == brandName.lower() and demisto.get(allInstances[instanceName], 'state') and allInstances[instanceName]['state']
  == 'active']\n            if not brandInstances:\n                send_status_to_panw_iot_cloud(integration,
  None, \"disabled\")\n                time.sleep(2)\n\n\ndef check_license_status(integration_name,
  integration_instance_list):\n    if integration_name == None:\n        raise Exception(\"Mandatory
  integration name missing. Please check input\")\n\n    if integration_name not in
  INTEGRATION_MAP :\n        raise Exception(\"Invalid Integration name. Please check
  input\")\n\n    integration = INTEGRATION_MAP[integration_name]\n    response =
  demisto.executeCommand(\"panw-iot-3rd-party-get-active-integrations\", {}) #,{\"using\":
  PANW_IOT_INSTANCE})\n    if isError(response[0]):\n        raise Exception(\"Failed
  to get active integrations from PANW IoT Cloud: %s\" % response[0]['Contents'])\n\n
  \   active_integrations = response[0]['Contents']['active_integrations']\n    max_integrations
  = response[0]['Contents']['max_integrations']\n    op_data = {\n        \"active_integrations\"
  : active_integrations,\n        \"max_integrations\": max_integrations\n    }\n
  \   demisto.results(op_data)\n    if int(max_integrations) > 3 or integration in
  active_integrations or len(active_integrations) < 3:\n        if integration_instance_list:\n
  \           for instance in integration_instance_list:\n                if instance
  != None and instance != \"\" and isInstanceActive(instance):\n                    send_status_to_panw_iot_cloud(integration,
  instance, \"success\")\n                    time.sleep(1)\n        else:\n            send_status_to_panw_iot_cloud(integration,
  None, \"success\")\n        return 'yes'\n    else:\n        return 'no'\n\n\n\n\ndef
  main():\n    integration_name = demisto.args().get('integration_name')\n    integration_instance_list
  = []\n    integration_instance_name = demisto.args().get('integration_instance_name')\n
  \   if integration_instance_name is not None and integration_instance_name != \"\":\n
  \       integration_instance_list = integration_instance_name.split(\",\")\n    try:\n
  \       update_status = update_outdated_status()\n        if update_status is not
  None:\n            demisto.results(update_status)\n        else:\n            demisto.results(check_license_status(integration_name,
  integration_instance_list))\n    except Exception as ex:\n        return_error(str(ex))\n\n\n\nif
  __name__ in ('__main__', '__builtin__', 'builtins'):\n    main()\n\n\n\n\nregister_module_line('CheckPANWIoTIntegrationLicense',
  'end', __line__())\n"
scripttarget: 0
subtype: python3
tags:
- Condition
type: python
