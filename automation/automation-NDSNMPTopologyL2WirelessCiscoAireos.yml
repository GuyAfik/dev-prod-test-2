args:
- description: Local Entry IP
  name: local_entry_ip
  required: true
- description: Network Discovery instance name
  name: nd_instance
  required: true
commonfields:
  id: NDSNMPTopologyL2WirelessCiscoAireos
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: NDSNMPTopologyL2WirelessCiscoAireos
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('NDSNMPTopologyL2WirelessCiscoAireos', 'start', __line__())


  from pysnmp.hlapi import *
  import socket
  import re

  NETWORK_DISCOVERY_INSTANCE=demisto.args().get("nd_instance")

  WLC_SYSTEM_INFO = "wlc_system_info"
  WLC_SYSTEM_DESC = "wlc_system_desc"
  WLC_AP_INFO = "wlc_ap_info"
  WLC_AP_IP = "wlc_ap_ip"
  WLC_AP_MAC = "wlc_ap_mac"
  WLC_AP_NAME = "wlc_ap_name"
  WLC_AP_LOCATION = "wlc_ap_location"
  WLC_AP_CLIENTS_INFO = "wlc_ap_clients_info"
  WLC_CLIENT_IP = "wlc_client_ip"
  WLC_CLIENT_MAC = "wlc_client_mac"
  WLC_CLIENT_NAME = "wlc_client_name"
  WLC_CLIENT_LOCATION = "wlc_client_location"
  WLC_CLIENT_AP_MAC = "wlc_client_ap_mac"
  WLC_CLIENT_SSID = "wlc_client_ssid"
  WLC_PROFILES_INFO = "wlc_profiles_info"
  WLC_PROFILE_ID = "wlc_profile_id"

  # *************** CISCO Wireless WLC Discovery Functions ***************
  CISCO_WLC_SYS_DESC_OID      = '1.3.6.1.2.1.1.1'
  # APs
  CISCO_WLC_AP_TOP_LEVEL_OID  = '1.3.6.1.4.1.14179.2.2.1.1'
  CISCO_WLC_AP_MAC_OID        = '1.3.6.1.4.1.14179.2.2.1.1.1'
  CISCO_WLC_AP_IP_OID         = '1.3.6.1.4.1.14179.2.2.1.1.19'
  CISCO_WLC_AP_NAME_OID       = '1.3.6.1.4.1.14179.2.2.1.1.3'
  CISCO_WLC_AP_LOCATION_OID   = '1.3.6.1.4.1.14179.2.2.1.1.4'
  # Profiles/SSIDs
  CISCO_WLC_PROFILE_SSID_OID  = '1.3.6.1.4.1.14179.2.1.1.1.2'
  # Clients
  CISCO_WLC_CLIENT_MAC_OID    = '1.3.6.1.4.1.14179.2.1.4.1.1'
  CISCO_WLC_CLIENT_IP_OID     = '1.3.6.1.4.1.14179.2.1.4.1.2'
  CISCO_WLC_CLIENT_SSID_OID   = '1.3.6.1.4.1.14179.2.1.4.1.7'
  CISCO_WLC_CLIENT_NAME_OID   = '1.3.6.1.4.1.14179.2.1.4.1.3'
  CISCO_WLC_CLIENT_AP_MAC_OID = '1.3.6.1.4.1.14179.2.1.4.1.4'


  def walk(ip,oid):
      response = demisto.executeCommand("nd-snmp-v2-walk-command", {
          "ip":ip,
          "oid": oid,
          "using": NETWORK_DISCOVERY_INSTANCE
      })
      if isError(response[0]):
          err_msg = 'Error, couldn\'t complete snmp v2 walk - '+str(response[0]['Contents'])
          raise Exception(err_msg)
      return response[0]['Contents']

  def remove_prefix(text, prefix):
      if text.startswith(prefix):
          return text[len(prefix):]
      return text

  def get_wlc_item_idx(key, oid):
      idx = remove_prefix(key, oid)
      item_idx = '.'.join(idx.strip().split('.')[1:])
      return item_idx

  def get_cisco_aireos_ap_clients_info(host):
      result_map = {}
      result_client_idx = {}
      # SNMP Walk to get Client MACs
      raw_result = walk(host, CISCO_WLC_CLIENT_MAC_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_CLIENT_MAC_OID)
          if item_idx not in result_client_idx:
              result_client_idx[item_idx] = {}
          raw_mac = v[2:]
          mac = ':'.join(a+b for a,b in zip(raw_mac[::2], raw_mac[1::2]))
          result_client_idx[item_idx][WLC_CLIENT_MAC] = mac
      # SNMP Walk to get Client IPs
      raw_result = walk(host, CISCO_WLC_CLIENT_IP_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_CLIENT_IP_OID)
          if item_idx not in result_client_idx:
              result_client_idx[item_idx] = {}
          result_client_idx[item_idx][WLC_CLIENT_IP] = v
      # SNMP Walk to get Client Names
      raw_result = walk(host, CISCO_WLC_CLIENT_NAME_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_CLIENT_NAME_OID)
          if item_idx not in result_client_idx:
              result_client_idx[item_idx] = {}
          result_client_idx[item_idx][WLC_CLIENT_NAME] = v
      # SNMP Walk to get Client SSID
      raw_result = walk(host, CISCO_WLC_CLIENT_SSID_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_CLIENT_SSID_OID)
          if item_idx not in result_client_idx:
              result_client_idx[item_idx] = {}
          result_client_idx[item_idx][WLC_CLIENT_SSID] = v
      # SNMP Walk to get Client AP MACs
      raw_result = walk(host, CISCO_WLC_CLIENT_AP_MAC_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_CLIENT_AP_MAC_OID)
          if item_idx not in result_client_idx:
              result_client_idx[item_idx] = {}
          raw_mac = v[2:]
          mac = ':'.join(a+b for a,b in zip(raw_mac[::2], raw_mac[1::2]))
          result_client_idx[item_idx][WLC_CLIENT_AP_MAC] = mac


      # Add AP info to result
      for k, v in result_client_idx.items():
          if WLC_CLIENT_AP_MAC in v:
              # Get AP MAC
              clnt_ap_mac = v[WLC_CLIENT_AP_MAC]
              if clnt_ap_mac not in result_map:
                  result_map[clnt_ap_mac] = {}
              # Get Client MAC
              if WLC_CLIENT_MAC in v:
                  clnt_mac = v[WLC_CLIENT_MAC]
                  # Client MAC
                  if clnt_mac not in result_map[clnt_ap_mac]:
                      result_map[clnt_ap_mac][clnt_mac] = {}
                  result_map[clnt_ap_mac][clnt_mac][WLC_CLIENT_MAC] = clnt_mac
                  # Client IP
                  if WLC_CLIENT_IP in v:
                      result_map[clnt_ap_mac][clnt_mac][WLC_CLIENT_IP] = v[WLC_CLIENT_IP]
                  # Client Name
                  if WLC_CLIENT_NAME in v:
                      result_map[clnt_ap_mac][clnt_mac][WLC_CLIENT_NAME] = v[WLC_CLIENT_NAME]
                  # Client SSID
                  if WLC_CLIENT_SSID in v:
                      result_map[clnt_ap_mac][clnt_mac][WLC_CLIENT_SSID] = v[WLC_CLIENT_SSID]
                  # Client AP MAC
                  result_map[clnt_ap_mac][clnt_mac][WLC_CLIENT_AP_MAC] = v[WLC_CLIENT_AP_MAC]
      # Return the result
      return result_map

  def get_cisco_aireos_profiles_info(host):
      result_map = {}
      # SNMP Walk to get System information
      raw_result = walk(host, CISCO_WLC_PROFILE_SSID_OID)
      for k, v in raw_result.items():
          if v not in result_map:
              result_map[v] = {}
          result_map[v][WLC_PROFILE_ID] = v
      return result_map


  def get_cisco_aireos_ap_info(host):
      result_map = {}
      result_ap_idx = {}
      # SNMP Walk to get AP MACs
      raw_result = walk(host, CISCO_WLC_AP_MAC_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_AP_MAC_OID)
          if item_idx not in result_ap_idx:
              result_ap_idx[item_idx] = {}
          raw_mac = v[2:]
          ap_mac = ':'.join(a+b for a,b in zip(raw_mac[::2], raw_mac[1::2]))
          result_ap_idx[item_idx][WLC_AP_MAC] = ap_mac
      # SNMP Walk to get AP IPs
      raw_result = walk(host, CISCO_WLC_AP_IP_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_AP_IP_OID)
          if item_idx not in result_ap_idx:
              result_ap_idx[item_idx] = {}
          result_ap_idx[item_idx][WLC_AP_IP] = v
      # SNMP Walk to get AP Names
      raw_result = walk(host, CISCO_WLC_AP_NAME_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_AP_NAME_OID)
          if item_idx not in result_ap_idx:
              result_ap_idx[item_idx] = {}
          result_ap_idx[item_idx][WLC_AP_NAME] = v
      # SNMP Walk to get AP Locations
      raw_result = walk(host, CISCO_WLC_AP_LOCATION_OID)
      for k, v in raw_result.items():
          item_idx = get_wlc_item_idx(k, CISCO_WLC_AP_LOCATION_OID)
          if item_idx not in result_ap_idx:
              result_ap_idx[item_idx] = {}
          result_ap_idx[item_idx][WLC_AP_LOCATION] = v

      # Add AP info to result
      for k, v in result_ap_idx.items():
          if WLC_AP_MAC in v:
              if v[WLC_AP_MAC] not in result_map:
                  result_map[v[WLC_AP_MAC]] = {}
              result_map[v[WLC_AP_MAC]][WLC_AP_MAC] = v[WLC_AP_MAC]
              if WLC_AP_IP in v:
                  result_map[v[WLC_AP_MAC]][WLC_AP_IP] = v[WLC_AP_IP]
              if WLC_AP_NAME in v:
                  result_map[v[WLC_AP_MAC]][WLC_AP_NAME] = v[WLC_AP_NAME]
              if WLC_AP_LOCATION in v:
                  result_map[v[WLC_AP_MAC]][WLC_AP_LOCATION] = v[WLC_AP_LOCATION]

      # Return the result
      return result_map

  def get_str_from_hex(val):
      #Check if the string starts with 0x then convert it to utf-8
      if val.startswith('0x'):
          try:
              ver = bytes.fromhex(remove_prefix(val, '0x')).decode('utf-8')
          except:
              ver = val
      else:
          ver = val
      return ver

  def get_cisco_aireos_system_info(host):
      result_map = {}
      # SNMP Walk to get System information
      raw_result = walk(host, CISCO_WLC_SYS_DESC_OID)
      for k, v in raw_result.items():
          if WLC_SYSTEM_DESC not in result_map:
              result_map[WLC_SYSTEM_DESC] = get_str_from_hex(v)
      return result_map


  def get_cisco_aireos_wireless_wlc_info(host):
      result_map = {}
      wlc_system_info = {}
      wlc_profiles_info = {}
      wlc_ap_info = {}
      wlc_ap_clients_info = {}

      # Get WLC System Info
      wlc_system_info = get_cisco_aireos_system_info(host)
      result_map[WLC_SYSTEM_INFO] = wlc_system_info
      # GET Profiles
      wlc_profiles_info = get_cisco_aireos_profiles_info(host)
      result_map[WLC_PROFILES_INFO] = wlc_profiles_info
      # Get APs
      wlc_ap_info = get_cisco_aireos_ap_info(host)
      result_map[WLC_AP_INFO] = wlc_ap_info
      # Get Clients
      wlc_ap_clients_info = get_cisco_aireos_ap_clients_info(host)
      result_map[WLC_AP_CLIENTS_INFO] = wlc_ap_clients_info

      return result_map


  def main():
      try:
          # LOCAL_ENTRY_IP = '10.6.72.87'
          LOCAL_ENTRY_IP = demisto.args().get('local_entry_ip')
          cisco_aireos_wireless_info = get_cisco_aireos_wireless_wlc_info(LOCAL_ENTRY_IP)
          # return_outputs("finished SNMP probing for Cisco wireless data for Node!")
          return_results(cisco_aireos_wireless_info)
      except Exception as e:
          raise Exception("Failed to get Cisco Node wireless data: %s" % str(e))



  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('NDSNMPTopologyL2WirelessCiscoAireos', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
