args:
- description: 'specify minutes of active device. Default is: ''15'''
  name: active_range
  required: true
- description: '(Optional)Offset for paging: Null value will accumulate all results
    by default.'
  name: offset
- description: '(Optional)Page size for paging: Null value will accumulate all results
    by default.'
  name: pageLength
- description: specify comma seperated site ids
  name: siteids
- description: DNAC instance name
  name: dnac_instance_name
  required: true
commonfields:
  id: ExportDeviceAttributesFromDnacToPANWIoTCloud
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ExportDeviceAttributesFromDnacToPANWIoTCloud
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ExportDeviceAttributesFromDnacToPANWIoTCloud', 'start', __line__())



  DNAC_INSTANCE = demisto.args().get('dnac_instance_name')
  def get_active_devices_from_panw_iot_cloud(retry=0):
      active_range=demisto.args().get('active_range')
      pageLength=demisto.args().get('pageLength')
      offset=demisto.args().get('offset')
      siteids=demisto.args().get('siteids')
      response = demisto.executeCommand("panw-iot-3rd-party-get-active-list", {
          "active_range":active_range,
          "pageLength": pageLength,
          "offset": offset,
          "siteids": siteids
      })
      if isError(response[0]):
          if retry == 0:
              time.sleep(1)
              return get_active_devices_from_panw_iot_cloud(retry=1)
          err_msg = f'Error, could not get active device list from PANW IoT Cloud - '+str(response[0]['Contents'])
          raise Exception(err_msg)

      return response[0]['Contents']

  def extract_mac_addresses(devices):
      response = demisto.executeCommand("panw-iot-3rd-party-extract-mac-address", {
          "Devices":devices
      })
      if isError(response[0]):
          err_msg = f'Error, could not extract mac addresses from active device list - '+str(response[0]['Contents'])
          raise Exception(err_msg)

      return response[0]['Contents']

  def get_dnac_client_details(mac_addresses):
      response = demisto.executeCommand("dnac-client-detail", {
          "client":mac_addresses,
          "execution-timeout":86400,
          "using": DNAC_INSTANCE
      })
      if isError(response[0]):
          err_msg = f'Error while extracting client details from cisco dnac - '+str(response[0]['Contents'])
          raise Exception(err_msg)

      return response[0]['Contents']

  def convert_dnac_attributes_to_iot_attributes(dnac_clients):
      response = demisto.executeCommand("panw-iot-3rd-party-extract-dnac-device-data", {
          "DNAcClientData":dnac_clients
      })
      if isError(response[0]):
          err_msg = f'Error while converting the dnac attributes to PANW IoT attributes - '+str(response[0]['Contents'])
          raise Exception(err_msg)

      return response[0]['Contents']

  def report_devices_panw_iot_cloud(dnac_clients):
      response = demisto.executeCommand("panw-iot-3rd-party-report-devices", {
          "DeviceData":dnac_clients,
          "pageLength":"100"
      })
      if isError(response[0]):
          err_msg = f'Error while reporting the device data to the PANW IoT Cloud - '+str(response[0]['Contents'])
          raise Exception(err_msg)

      return response[0]['Contents']

  def send_status_to_panw_iot_cloud(status, msg):
      """
      Reports status details back to PANW IoT Cloud.
      param status: Status (error, disabled, success) to be send to PANW IoT cloud.
      param msg: Debug message to be send to PANW IoT cloud.
      """
      resp = demisto.executeCommand("panw-iot-3rd-party-report-status-to-panw", {
          "status": status,
          "message": msg,
          "integration_name": "cisco_dnac",
          "playbook_name": "extract-dnac-clients",
          "custom_integration_name":DNAC_INSTANCE,
          "asset_type": 'device',
          "timestamp": int(round(time.time() * 1000))
      })

      if isError(resp[0]):
          pass

  def main():
      try:
          # send_status_to_panw_iot_cloud("success", "Starting export of Cisco DNAC devices")
          device_list = get_active_devices_from_panw_iot_cloud()
          # return_results(isinstance(device_list, list))
          # device_list=[{'active_list': [{"deviceid": "52:54:00:63:c6:d9"},{"deviceid": "52:54:00:60:c1:b0"}]}]
          if device_list is not None and isinstance(device_list, list) and device_list[0]['active_list'] is not None and len(device_list[0]['active_list']) > 0:
              active_device_list_length = len(device_list[0]['active_list'])
              return_outputs('total number of devices extracted :'+ str(active_device_list_length))
              devices_with_mac_addresses = extract_mac_addresses(device_list)
              if devices_with_mac_addresses is not None and isinstance(devices_with_mac_addresses, list) and devices_with_mac_addresses[0]['mac_list'] is not None and len(devices_with_mac_addresses[0]['mac_list']) > 0:
                  return_outputs('total number of macs extracted :'+ str(len(devices_with_mac_addresses[0]['mac_list'])))
                  # return_outputs("dnac.clients-"+ str(devices_with_mac_addresses))
                  # devices_with_mac_addresses=[{'mac_list': ['00:00:2a:01:00:36'], 'sites': 'None'}]
                  dnac_client_details = get_dnac_client_details(devices_with_mac_addresses)
                  return_outputs("dnac clients are"+ str(dnac_client_details))
                  if dnac_client_details is not None and isinstance(dnac_client_details, dict):
                      return_outputs('total number of dnac client details extracted are :'+str(len(dnac_client_details['clients'])))
                      if dnac_client_details['skipped_macs'] is not None:
                          LOG('skipped mac address due to timeout are: '+str(dnac_client_details['skipped_macs']))
                          return_outputs('skipped mac address due to timeout are: '+str(dnac_client_details['skipped_macs']))
                      iot_attribute_device_list = convert_dnac_attributes_to_iot_attributes(dnac_client_details['clients'])
                      # return_outputs('iot_attribute_device_list:'+str(iot_attribute_device_list))
                      if iot_attribute_device_list is not None:
                          message=report_devices_panw_iot_cloud(iot_attribute_device_list)
                          send_status_to_panw_iot_cloud("success", message)
                          return_results(message)
                      else:
                          return_results('IoT device attributes are empty')
                          send_status_to_panw_iot_cloud("error", "IoT device attributes are empty")
                  else:
                      return_results('Extracted DNAC client details are empty or object is not dict:'+str(dnac_client_details))
                      send_status_to_panw_iot_cloud("error", "Extracted DNAC client details are empty or object is not dict:"+str(dnac_client_details))
              else:
                  return_results('Devices with mac address list is empty or object is not list')
                  send_status_to_panw_iot_cloud("error", "Devices with mac address list is empty")
          else:
              return_results('Active device list is empty or object is not list')
              send_status_to_panw_iot_cloud("error", "Get Active List does not exists")
      except Exception as ex:
          send_status_to_panw_iot_cloud("error", "Failed to export devices to Cisco DNAC %s" % str(ex))
          return_error(str(ex))



  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ExportDeviceAttributesFromDnacToPANWIoTCloud', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- dnac
timeout: 24h0m0s
type: python
