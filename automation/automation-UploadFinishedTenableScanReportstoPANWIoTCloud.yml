args:
- name: report_data_map
  required: true
- isArray: true
  name: file_data
  required: true
commonfields:
  id: UploadFinishedTenableScanReportstoPANWIoTCloud
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: UploadFinishedTenableScanReportstoPANWIoTCloud
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('UploadFinishedTenableScanReportstoPANWIoTCloud', 'start', __line__())


  from typing import Dict, Any
  import traceback


  def upload_files_to_panw_iot_cloud(report_job_map, file_data):
      op_list = []
      if report_job_map == None or file_data == None:
          raise Exception("Invalid job data or file data")
      args_list = []
      for job_id in report_job_map:
          job_data = report_job_map[job_id]
          pdf_file = None
          csv_file = None
          csv_id = None
          pdf_id = None
          first_id = job_data[0]['report_id']
          ip = job_data[0]['ip']
          second_id = job_data[1]['report_id']

          for file in file_data:
              if 'Name' in file and 'Info':
                  name = file['Name']
                  info = file['Info']
                  extracted_format = None
                  if '/' in info:
                      extracted_format = info.split('/')[1]
                  else:
                      extracted_format = info
                  extracted_id = name.split('_')[1].split('.')[0]
                  if extracted_id == first_id or extracted_id == second_id:
                      if extracted_format == 'csv':
                          csv_file = file['EntryID']
                          csv_id = extracted_id
                      elif extracted_format == 'pdf':
                          pdf_file = file['EntryID']
                          pdf_id = extracted_id

          args_list.append({'xml_file': csv_file, 'pdf_file': pdf_file, 'job_id': job_id, 'pdf_id': pdf_id, 'ip': ip})
      results = {}
      failed_upload_job_ids = []
      for args in args_list:
          res = demisto.executeCommand("panw-iot-3rd-party-upload-vulnerability-scan-report", {
              'xml_upload': args['xml_file'],
              'pdf_upload': args['pdf_file'],
              'job_id': args['job_id'],
              'scan_type': 'tenable',
              'report_id': args['pdf_id'],
              'status': 'success',
              'message': 'Uploading reports for %s' % args['job_id'],
              'ip': args['ip']
          })
          if isError(res[0]):
              failed_upload_job_ids.append(args['job_id'])

          res_str = json.dumps(res[0]['Contents'])
          op_list.append(res[0])
          time.sleep(5)

      demisto.setContext('failed_upload_job_ids', failed_upload_job_ids)
      return op_list


  def main():
      report_data_map = demisto.args().get('report_data_map')
      file_data = demisto.args().get('file_data')
      try:
          return_results(upload_files_to_panw_iot_cloud(report_data_map, file_data))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute AddKeyToList. Error: {traceback.format_exc()}')


  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('UploadFinishedTenableScanReportstoPANWIoTCloud', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
