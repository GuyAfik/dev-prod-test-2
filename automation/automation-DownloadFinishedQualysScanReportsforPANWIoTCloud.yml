args:
- description: Qualys Instance Name
  name: qualys_instance_name
  required: true
commonfields:
  id: DownloadFinishedQualysScanReportsforPANWIoTCloud
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DownloadFinishedQualysScanReportsforPANWIoTCloud
outputs:
- contextPath: PANWIoTCloud.finishedReports
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DownloadFinishedQualysScanReportsforPANWIoTCloud', 'start', __line__())




  from typing import Dict, Any
  import traceback

  USING_QUALYS_INSTANCE = demisto.args().get('qualys_instance_name')
  def get_cache_report_list():
      list_name = 'QualysLaunchedReports'
      res = demisto.executeCommand('getList', {'listName': list_name})
      if (
          not isinstance(res, list)
          or 'Contents' not in res[0]
          or not isinstance(res[0]['Contents'], str)
          or 'Item not found (8)' in res[0]['Contents']
      ):
          return 'No launched Reports - Report Cache QualysLaunchedReports is Empty'

      report_ids = res[0]['Contents']
      report_id_list = [line.split(',') for line in report_ids.split('\n')]
      return get_finished_report_list(report_id_list[0])

  def get_finished_report_list(launched_report_list):
      finished_report_list = []
      report_map = {}
      for entry in launched_report_list:
          if '_' in entry:
              report_id, report_ip, report_job = entry.split('_')
              report_map[report_id] = {'ip': report_ip, 'job': report_job}
      if len(report_map) == 0:
          return 'No launched Reports - Report Cache QualysLaunchedReports is Empty'

      report_job_map = {}
      res = demisto.executeCommand("qualys-report-list", {"using":USING_QUALYS_INSTANCE})
      if isError(res):
          raise Exception(res[0]['Contents'])
      try:
          # report_list = res[0]['Contents']['REPORT_LIST_OUTPUT']['RESPONSE']['REPORT_LIST']['REPORT']
          report_list = res[0].get("EntryContext").get("Qualys.Report(val.ID && val.ID == obj.ID)")
          for report in report_list:
              _id = report.get("ID")
              output_format = report.get("OUTPUT_FORMAT")
              status = report.get('STATUS').get('STATE')
              if _id in report_map and status == "Finished":
                  ip = report_map[_id]['ip']
                  job = report_map[_id]['job']

                  if job in report_job_map:
                      report_job_map[job].append({'ip': ip, 'id': _id, "output_format": output_format})
                  else:
                      report_job_map[job] = [{'ip': ip, 'id': _id, "output_format": output_format}]
      except Exception:
          raise Exception('Failed to get Qualys report data :'+str(res[0]['Contents']))

      incomplete_reports = []
      for job_id in report_job_map:
          job_data = report_job_map[job_id]
          if len(job_data) == 2:
              for data in job_data:
                  report_cache_entry = data['id'] + "_" + data['ip'] + "_" + job_id
                  demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations",
                      {"name":"QualysLaunchedReports","operation":"delete","value":report_cache_entry})
          else:
              incomplete_reports.append(job_id)

      for job_id in incomplete_reports:
          del report_job_map[job_id]

      return download_finished_reports_to_context(report_job_map)

  def download_finished_reports_to_context(report_job_map):
      op_list = []
      index = 0
      result = {}
      for job, job_data in report_job_map.items():
          for entry in job_data:
              ip = entry.get('ip')
              _id = entry.get('id')
              output_format = entry.get("output_format")
              result[_id] = ip

              res = demisto.executeCommand("qualys-report-fetch", {"id":_id, "file_format": output_format, 'using':USING_QUALYS_INSTANCE})
              local_report_name = res[0]['Contents']
              op_list.append(res[0])
              name='report_'+str(ip)+'_'+str(_id)
              report_list.append({'report_id':_id,'name':name})
              time.sleep(60)
      appendContext('Qualys.reportInfoList', report_list)
      appendContext('PANWIoTCloud.finishedReports', report_job_map)
      return op_list

  def main():
      try:
          return_results(get_cache_report_list())
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute DownloadFinishedQualysScanReportsforPANWIoTCloud. Error: {str(ex)}')

  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()


  register_module_line('DownloadFinishedQualysScanReportsforPANWIoTCloud', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
