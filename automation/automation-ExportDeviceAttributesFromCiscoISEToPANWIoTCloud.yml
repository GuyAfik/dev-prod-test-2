args:
- name: instance_name
- name: active_range
- name: site_names
commonfields:
  id: fda362b5-c0e3-4602-8a7e-1add8f6503ca
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.90585
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ExportDeviceAttributesFromCiscoISEToPANWIoTCloud
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ExportDeviceAttributesFromCiscoISEToPANWIoTCloud', 'start', __line__())







  from typing import Dict, Any
  import traceback

  ISE_INSTANCE = demisto.args().get('instance_name')

  def get_ise_mac_session_data(mac_address):
      res = demisto.executeCommand("cisco-ise-mnt-get-session-by-mac", {
          "mac_address":mac_address,
          "using": ISE_INSTANCE
      })
      if isError(res[0]):
          demisto.error("Failed to Session data for - %s" % mac_address)
          return None
      return res[0]['Contents']


  def get_ise_ers_endpoint_profile(profile_id):
      res = demisto.executeCommand("cisco-ise-get-ers-profile-by-id", {
          "profile_id":profile_id,
           "using": ISE_INSTANCE
      })
      if isError(res[0]):
          demisto.error("Failed to ERS Profile data for - %s" % profile_id)
          return None

      return res[0]['Contents']


  def get_ise_mac_ers_data(mac_address):
      res = demisto.executeCommand("cisco-ise-get-endpoint-id-by-name", {
          "mac_address":mac_address,
          "using": ISE_INSTANCE
      })
      if isError(res[0]):
          demisto.error("Failed to ERS data for - %s" % mac_address)
          return None
      ep_id =  res[0]['Contents']

      res = demisto.executeCommand("cisco-ise-get-endpoint-details", {
          "macAddress":mac_address,
          "endpointID": ep_id,
          "using": ISE_INSTANCE
      })
      if isError(res[0]):
          demisto.error("Failed to ERS data for - %s" % mac_address)
          return None
      return res[0]['Contents']

  def convert_ers_ep_data(ers_data, mac_address, device_data):
      if not ers_data:
          return None
      if not device_data:
          device_data = {}

      try:
          custom_attributes = ers_data['customAttributes']['customAttributes']
          for key in custom_attributes:
              if "VLAN" in key or "vlan" in key or "Vlan" in key:
                  device_data['display_vlan'] = custom_attributes[key]
      except:
          device_data['display_vlan'] = None

      profile_id = ers_data.get('profileId')
      if profile_id:
          profile_data = get_ise_ers_endpoint_profile(profile_id)
          device_data['display_nac_profile'] = profile_data["ProfilerProfile"]["name"]
      return device_data

  def convert_session_ep_data(device_data, mac_address):
      if not device_data:
          return None
      session_dict = {}
      mnt_data = None
      if "sessionParameters" in device_data:
        mnt_data = device_data["sessionParameters"]
      if not mnt_data:
        return None
      session_dict = {
          "deviceid":  mac_address.lower(),
          "display_switchName": mnt_data.get("network_device_name"),
          "display_phyPort": mnt_data.get("nas_port_id"),
          "display_ise_id_group": mnt_data.get("identity_group"),
          "display_switchIP": mnt_data.get("nas_ip_address"),
          "display_ise_auth_acs_ts": mnt_data.get("auth_acs_timestamp"),
      }
      pass_status = mnt_data.get("passed")
      failed_status = mnt_data.get("failed")
      if pass_status and pass_status.get("#text") == "true":
          session_dict["display_ise_auth_status"] = "Authenticated"
      elif failed_status and failed_status.get("#text") == "true":
          session_dict["display_ise_auth_status"] = "Authentication Failed"
      else:
          session_dict['display_ise_auth_status'] = None

      return session_dict


  def get_panw_active_devices(page_length=None, offset=None,retry=0):
      active_range=demisto.args().get('active_range')
      if active_range == None or active_range == "":
          active_range = 15
      siteids=demisto.args().get('site_names')
      response = demisto.executeCommand("panw-iot-3rd-party-get-active-list", {
          "active_range":active_range,
          "siteids": siteids,
          "pageLength": page_length,
          "offset": offset,
          'mac_only': 'true',
          "single_call": "yes"
      })
      if isError(response[0]):
          if retry == 0:
              time.sleep(5)
              return get_panw_active_devices(page_length=page_length, offset=offset, retry=1)
          err_msg = f'Error, could not get active device list from PANW IoT Cloud - ' + str(response[0]['Contents'])
          raise Exception(err_msg)

      return response[0]['Contents']

  def report_devices_panw_iot_cloud(devices):
      total = len(devices)
      offset = 0
      page_length = 1000
      total_devices_updated=0
      while total >= offset:
          new_offset = offset+page_length
          sub_devices = devices[offset:new_offset]
          offset = new_offset
          response = demisto.executeCommand("panw-iot-3rd-party-report-devices", {
              "DeviceData":sub_devices,
              "pageLength":"1000",
              "IntegrationName": "cisco_ise",
          })
          if isError(response[0]):
              err_msg = f'Error while reporting the device data to the PANW IoT Cloud - '+str(response[0]['Contents'])
              # raise Exception(err_msg)
              # return_outputs(f'error payload: {sub_devices}')
              demisto.error(err_msg)
          else:
              panw_response=response[0]['Contents']
              devices_updated = panw_response.split()[0]
              if devices_updated.isdigit() == True:
                  total_devices_updated = total_devices_updated+int(devices_updated)
      return total_devices_updated


  def send_status_to_panw_iot_cloud(status, msg, retry=0):
      """
      Reports status details back to PANW IoT Cloud.
      param status: Status (error, disabled, success) to be send to PANW IoT cloud.
      param msg: Debug message to be send to PANW IoT cloud.
      """
      resp = demisto.executeCommand("panw-iot-3rd-party-report-status-to-panw", {
          "status": status,
          "message": msg,
          "integration_name": "ise",
          "playbook_name": "Import Cisco ISE Endpoint Data - PANW IoT 3rd Party Integration",
          "asset_type": 'device',
          "timestamp": int(round(time.time() * 1000))
      })

      if isError(resp[0]):
          if retry == 0:
              time.sleep(1)
              return send_status_to_panw_iot_cloud(status, msg, retry=1)
          err_msg = f'Error, failed to send status to PANW IoT Cloud - {resp[0].get("Contents")}'
          raise Exception(err_msg)

  def report_matched_ised_device_to_palo():

      pagelength = 1000
      offSet = 0

      # Counters/Stats # please revisit
      active_device_total_count = 0
      active_devices_with_mac_total_count = 0
      ers_ise_matched_deivce_count = 0
      mnt_ise_matched_deivce_count = 0
      total_ise_matched_device_count = 0
      device_updated_on_iot = 0

      while True:
          active_device_list_length = 0

          # First get active devices from Palo - Active range defaults to 15 minutes
          device_list = get_panw_active_devices(page_length=pagelength, offset=offSet)

          if device_list is None or not isinstance(device_list, list) or device_list[0]['active_list'] is None or len(device_list[0]['active_list']) == 0:
              break

          devices = device_list[0]['active_list']
          active_device_list_length = len(devices)
          active_device_total_count += active_device_list_length

          #Now retrieve the active devices from ers and mnt nodes and prepare the data to be sent back to IoT
          ise_matched_devices = []
          for device in devices:
              mac_address = device['deviceid']
              if is_mac_address(mac_address):
                  device_data = {}
                  active_devices_with_mac_total_count += 1

                  mnt_data = get_ise_mac_session_data(mac_address)
                  if mnt_data:
                      mnt_ise_matched_deivce_count += 1
                      device_data = convert_session_ep_data(mnt_data, mac_address)

                  ers_data = get_ise_mac_ers_data(mac_address)
                  if ers_data:
                      ers_ise_matched_deivce_count += 1
                      device_data = convert_ers_ep_data(ers_data, mac_address, device_data)

                  if ers_data or mnt_data:
                      ise_matched_devices.append(device_data)
                      total_ise_matched_device_count += 1

          #Now send the device list back to IoT
          device_updated_on_iot += report_devices_panw_iot_cloud(ise_matched_devices)
          send_status_to_panw_iot_cloud("success", "")

          #print("active device = %d, total = %d" % (active_device_list_length, active_device_total_count))

          if active_device_list_length < pagelength:
              break
          offSet += pagelength

      op_status = {}
      stats = {}
      op_status["Devices matched on ISE "] = total_ise_matched_device_count
      op_status["Palo Alto IoT devices updated"] = device_updated_on_iot

      stats["Palo Alto IoT active devices pulled"] = active_device_total_count
      stats["Palo Alto IoT active devices with mac address pulled"] = active_devices_with_mac_total_count
      stats["Palo Alto IoT devices updated"] = device_updated_on_iot
      stats["Devices matched on ISE (ERS)"] = ers_ise_matched_deivce_count
      stats["Devices matched on ISE (MNT)"] = mnt_ise_matched_deivce_count
      stats["Devices matched on ISE "] = total_ise_matched_device_count


      return_results(
          CommandResults(
              readable_output=tableToMarkdown("ISE Data Import Summary", op_status, removeNull=True),
              outputs_prefix="Stats",
              outputs=stats
          )
      )

  ''' MAIN FUNCTION '''


  def main():
      try:
          report_matched_ised_device_to_palo()
          send_status_to_panw_iot_cloud("success", "")
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          send_status_to_panw_iot_cloud("error", str(ex))
          return_error(f'Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()



  register_module_line('ExportDeviceAttributesFromCiscoISEToPANWIoTCloud', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 2222h13m20s
type: python
