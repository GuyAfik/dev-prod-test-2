args:
- description: SNMP integration instance name
  name: snmp_instance
  required: true
commonfields:
  id: 0cfa9efa-0cae-4413-8906-e0597db0de67
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DiscoverSNMPSwitchesAsEndpoints
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DiscoverSNMPSwitchesAsEndpoints', 'start', __line__())


  SNMP_INSTANCE = demisto.args().get('snmp_instance')
  NEIGHBOR_SWITCHES_CACHE = SNMP_INSTANCE+"_Neighbor_Switches"

  SYS_NAME_OID='1.3.6.1.2.1.1.5'
  SYS_DESC_OID='1.3.6.1.2.1.1.1'
  SYS_LOCATION='1.3.6.1.2.1.1.6'
  IF_IDX_TO_MAC_ADDRESS_OID = '1.3.6.1.2.1.2.2.1.6'

  def walk(ip, oid):
      res = demisto.executeCommand("snmp-v2-walk-command", {
          "ip": ip,
          "oid": oid,
          "using": SNMP_INSTANCE
      })
      if (
          not isinstance(res, list)
          or 'Contents' not in res[0]
          or 'Item not found (8)' in res[0]['Contents']
      ):
          return None
      return res[0]['Contents']

  def get_switches_list_cache(list_name):
      res = demisto.executeCommand('getList', {'listName': list_name})
      if (
          not isinstance(res, list)
          or 'Contents' not in res[0]
          or 'Item not found (8)' in res[0]['Contents']
      ):
          return None
      contents = json.loads(res[0]['Contents'])
      return contents

  def get_mac_address(host):
      try:
          raw_result = walk(host, IF_IDX_TO_MAC_ADDRESS_OID)
          for k, v in raw_result.items():
              if(v!=''):
                  mac = remove_prefix(v,"0x")
                  if(len(mac) == 12):
                      mac_colon = ':'.join(mac[i:i + 2] for i in range(0, 12, 2))
                      return mac_colon
          return None
      except Exception as e:
          demisto.error(f'Error while getting mac address for host: {host} and the error is {e}')
          return None

  def remove_prefix(text, oid_prefix):
      if text.startswith(oid_prefix):
          return text[len(oid_prefix):]
      return text

  # System Description for Vendor discovery
  def get_str_from_hex(val):
      #Check if the string starts with 0x then convert it to utf-8
      if val.startswith('0x'):
          try:
              ver = bytes.fromhex(remove_prefix(val, '0x')).decode('utf-8')
          except:
              ver = val
      else:
          ver = val
      return ver

  def get_parsed_snmp_result(device_ip, OID):
      sys_result = walk(device_ip, OID)
      for k, v in sys_result.items():
          sys_val = get_str_from_hex(v)
          return sys_val

  def get_switch_data(snmp_device_ips):
      switch_data=[]
      for device_ip in snmp_device_ips:
          result_map={}
          mac_address = get_mac_address(device_ip)
          if mac_address:
              result_map['deviceid']=mac_address
              sys_name = get_parsed_snmp_result(device_ip, SYS_NAME_OID)
              sys_desc = get_parsed_snmp_result(device_ip,SYS_DESC_OID)
              sys_location = get_parsed_snmp_result(device_ip,SYS_LOCATION)
              result_map['display_hostname']=sys_name
              result_map['display_location']=sys_location
              result_map['display_desc']=sys_desc
              result_map['ip']=device_ip
              switch_data.append(result_map)
          else:
              demisto.info(f'No mac address found for host: {device_ip}. Hence skipping to send the switch information.')

      return switch_data

  def report_devices_panw_iot_cloud(switches):
      demisto.info(f'switches:{switches}')
      response = demisto.executeCommand("panw-iot-3rd-party-report-devices", {
              "DeviceData":switches,
              "pageLength":"1000",
              "IntegrationInstanceName":SNMP_INSTANCE,
              "IntegrationName":"snmp"
          })
      if isError(response[0]):
          err_msg = f'Error while reporting the device data to the PANW IoT Cloud - {(response[0]["Contents"])}'
          raise Exception(err_msg)
      return response[0]['Contents']

  def main():
      try:
          neighbor_switches = get_switches_list_cache(NEIGHBOR_SWITCHES_CACHE)
          if neighbor_switches:
              demisto.info('Found the cache and it is being validated')
              switches = neighbor_switches['neighbor_switches']
              demisto.info(f'neighbor_switches_list:{switches}')
              snmp_device_ips = []
              snmp_device_ips = list(switches.keys())
              switch_device_data = get_switch_data(snmp_device_ips)
              demisto.info(f'switch_device_data:{switch_device_data}')
              message = report_devices_panw_iot_cloud(switch_device_data)
              return_results(message)
          else:
              return_results("No switches found")
      except Exception as ex:
          return_error(str(ex))

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('DiscoverSNMPSwitchesAsEndpoints', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 231h40m0s
type: python
