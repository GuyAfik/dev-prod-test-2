args:
- description: Active Aruba ClearPass Instance
  name: active_aruba_cp_instance
- description: Increment time in minutes. Default is 15 minutes
  name: increment_time
- description: 'PANW IoT site(s). '
  isArray: true
  name: sites
- description: 'PANW IoT device tag(s). '
  isArray: true
  name: tags
- description: List of custom attributes. All attributes will be exported per device
    if empty.
  isArray: true
  name: custom_attributes
commonfields:
  id: SendPANWIoTDevicesToArubaClearPass
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SendPANWIoTDevicesToArubaClearPass
outputs:
- contextPath: PaloAltoIoTIntegrationBase.Status
  description: total count of devices updated or created on ClearPass
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SendPANWIoTDevicesToArubaClearPass', 'start', __line__())





  #PANW_IOT_INSTANCE = 'PANW IoT 3rd Party Integration Instance'
  ARUBA_CP_ACTIVE_INSTANCE = demisto.args().get("active_aruba_cp_instance")
  if ARUBA_CP_ACTIVE_INSTANCE is None or ARUBA_CP_ACTIVE_INSTANCE == '':
      ARUBA_CP_ACTIVE_INSTANCE='PANW IoT 3rd Party Aruba Clearpass Integration Instance'
  ACCESS_TOKEN_NAME=ARUBA_CP_ACTIVE_INSTANCE+"_access_token"
  ACCESS_TOKEN_CONTEXT=ARUBA_CP_ACTIVE_INSTANCE+".ArubaCP.access_token"
  UPDATE_EP_CMD = 'aruba-clearpass-update-endpoint'
  ARUBA_CP_FIELD_MAP={}
  '''ARUBA_CP_FIELD_MAP = {
      "ip address": ["PanwIoTIP"],
      "ip_address": ["PanwIoTIP"],
      "profile": ["PanwIoTProfile"],
      "category": ["PanwIoTCategory"],
      "risk_score": ["PanwIoTRiskScore"],
      "confidence": ["PanwIoTConfidence"],
      "confidence_score": ["PanwIoTConfidence"],
      "tag": ["PanwIoTTag"],
      "asset_tag": ["PanwIoTTag"],
      "Tags": ["PanwIoTTag"],
      "hostname": ["PanwIoTHostname"],
      "osCombined": ["PanwIoTOS"],
      "model": ["PanwIoTModel"],
      "vendor": ["PanwIoTVendor"],
      "Serial_Number": ["PanwIoTSerial"],
      "endpoint_protection": ["PanwIoTEPP"],
      "AET": ["PanwIoTAET"],
      "External Network": ["PanwIoTInternetAccess"],
  }
  '''

  INT_FIELDS = ["risk_score", "risk score", "confidence", "confidence score", "confidence_score"]

  def mac_validation(mac):
      if not re.match("[0-9a-f]{2}([-:])[0-9a-f]{2}(\\1[0-9a-f]{2}){4}$", mac.lower()):
          return False
      return True

  def get_devices_from_panw_iot_cloud(increment_time=None, sites=None, tags=None, retry=0):
      """
      Gets assets from PANW IoT cloud.
      param offset: Offset number for the asset list.
      param page_size: Page size of the response being requested.
      """

      response = demisto.executeCommand("panw-iot-3rd-party-get-asset-list", {
          "asset_type":"device",
          "increment_time": increment_time,
          "site_names": sites,
          "tags": tags,
      })

      if isError(response[0]):
          if retry == 0:
              time.sleep(1)
              return get_devices_from_panw_iot_cloud(increment_time, retry=1)
          err_msg = f'Error, could not get assets from PANW IoT Cloud - {response[0].get("Contents")}'
          raise Exception(err_msg)

      return response[0]['Contents']

  def convert_devices_to_aruba_clearpass_attributes(device_map, custom_attributes=None):
      """
      Converts the device from PANW IoT cloud to aruba clearpass attributes.
      device: List of PANW IoT devices.
      custom_attributes: custom attributes chosen by user.
      """
      attribute_list = {}
      if 'deviceid' in device_map:
          if device_map['deviceid'] is None or device_map['deviceid'] == "":
              return None
          attribute_list['mac'] = device_map['deviceid']
          if not is_mac_address(attribute_list['mac']) or mac_validation(attribute_list['mac']) == False:
              return None
          zb_attributes = {}
          for field in device_map:
              if custom_attributes is not None and field not in custom_attributes:
                  continue
              if device_map[field] is None or device_map[field] == "":
                  continue
              if field in ARUBA_CP_FIELD_MAP:
                  # return_outputs('field-'+field)
                  # return_outputs('ARUBA_CP_FIELD_MAP[field]-'+ARUBA_CP_FIELD_MAP[field])
                  if field in INT_FIELDS:
                      try:
                          int_val = int(device_map[field])
                      except Exception:
                          continue
                      zb_attributes[ARUBA_CP_FIELD_MAP[field]] = int_val
                  else:
                      zb_attributes[ARUBA_CP_FIELD_MAP[field]] = device_map[field]
          attribute_list['zb_attributes'] = zb_attributes
      return attribute_list

  def send_status_to_panw_iot_cloud(status, msg):
      """
      Reports status details back to PANW IoT Cloud.
      param status: Status (error, disabled, success) to be send to PANW IoT cloud.
      param msg: Debug message to be send to PANW IoT cloud.
      """
      resp = demisto.executeCommand("panw-iot-3rd-party-report-status-to-panw", {
          "status": status,
          "message": msg,
          "integration_name": "clearpass",
          "playbook_name": "Incremental Export to Aruba ClearPass- PANW IoT 3rd Party Integration",
          "asset_type": 'device',
          "custom_integration_name": ARUBA_CP_ACTIVE_INSTANCE,
          "timestamp": int(round(time.time() * 1000))
          #"using": PANW_IOT_INSTANCE
      })

      if isError(resp[0]):
          err_msg = f'Error, failed to send status to PANW IoT Cloud - {resp[0].get("Contents")}'
          raise Exception(err_msg)


  def create_new_ep(mac, attr_map, active_instance):
      """
      Create a new endpoint with the given params
      Param mac: mac address of the endpoint that needs to be created.
      Param attr_map: a map containing various clearpass custom attributes.
      Param active_instance: The primary/active ClearPass instance.
      """
      resp = demisto.executeCommand("aruba-clearpass-create-endpoint", {
          "mac_address": mac,
          "attributes_map": attr_map,
          "context_name":ACCESS_TOKEN_CONTEXT,
          "using": active_instance
      })
      status = resp[0]["Contents"]
      # return status
      # 404 Not Found or empty results, we need to create a new EP
      # if status == "SUCCESS":
      if "ArubaCP.Endpoint.MACAddress" in status:
         pass
      else:
          raise Exception(" failed to create a new endpoint: "+ str(status))

  def execute_fetch_access_token_cmd():
      result = demisto.executeCommand("aruba-clearpass-fetch-accesstoken",{"name":ACCESS_TOKEN_CONTEXT})
      expires_at = result[0]['Contents']['expires_at']
      at = result[0]['Contents']['access_token']
      demisto.executeCommand("createList", {"listName":ACCESS_TOKEN_NAME,"listData":result[0]['Contents']})
      result = demisto.executeCommand("getList", {"listName":ACCESS_TOKEN_NAME})
      access_token_content = result[0]['Contents']
      access_token =  str(access_token_content).split(",")[0].split(":")[1].replace("\"","").replace("\'","")
      demisto.setContext(ACCESS_TOKEN_CONTEXT, access_token)

  def execute_get_access_token_cmd(result):
      demisto.setContext(ACCESS_TOKEN_CONTEXT, result)
      result = demisto.executeCommand("aruba-clearpass-get-accesstoken",{"name":ACCESS_TOKEN_CONTEXT})
      access_token_content = result[0]['Contents']
      demisto.executeCommand("createList", {"listName":ACCESS_TOKEN_NAME,"listData":access_token_content})
      access_token =  str(access_token_content).split(",")[0].split(":")[1].replace("\"","").replace("\'","")
      # return_outputs(access_token_content)
      demisto.setContext(ACCESS_TOKEN_CONTEXT, access_token)

  def create_or_update_ep(mac, attr_map):
      """
      Check if an enpoint exists in Aruba CP, if not create one with the custom attributes
      otherwise update it. If at any point the connection goes down or we get a 401 -
      unautherized access we will attempt to get the new active instance.
      Params mac: Mac adress of the endpoint.
      attr_map: Custom attributes for the endpoint.
      """

      global ARUBA_CP_ACTIVE_INSTANCE
      global UPDATE_EP_CMD

      result = demisto.executeCommand("getList", {"listName":ACCESS_TOKEN_NAME})
      if (
          not isinstance(result, list)
          or 'Contents' not in result[0]
          or not isinstance(result[0]['Contents'], str)
          or result[0]['Contents'] == 'Item not found (8)'
      ):
          execute_fetch_access_token_cmd()
      else:
          execute_get_access_token_cmd(result)


      # Check if this mac address (endpoint) is present in aruba clearpass
      resp = demisto.executeCommand(UPDATE_EP_CMD, {
          "mac_address": mac,
          "attributes_map": attr_map,
          "context_name":ACCESS_TOKEN_CONTEXT,
          "using": ARUBA_CP_ACTIVE_INSTANCE
      })
      status = resp[0]["Contents"]
      # return_outputs('2'+str(status))
      # 404 Not Found or empty results, we need to create a new EP
      if "ArubaCP.Update.Endpoint" in status:
         pass
      elif status == "CREATE_NEW_ENDPOINT":
          create_new_ep(mac, attr_map, ARUBA_CP_ACTIVE_INSTANCE)
      elif status == "FETCH_NEW_TOKEN":
          execute_fetch_access_token_cmd()
          create_or_update_ep(mac, attr_map)
      else:
          raise Exception(status)


  def send_panw_iot_devices_to_send_to_aruba_cp(device_list, custom_attributes):
      """
      For given device lists consisting of custom attributes, create or update
      endpoints in Aruba CP.
      Param device_list: a list of devices and their custom attributes.
      """
      count = len(device_list)
      unique_macs = set()
      # devices = json.loads(device_list)
      for device in device_list:

          attrs = convert_devices_to_aruba_clearpass_attributes(device, custom_attributes)
          if attrs is not None:
              attr_map={}
              mac = attrs['mac']
              attr_map = attrs['zb_attributes']
              if mac not in unique_macs:
                  create_or_update_ep(mac, attr_map)
                  unique_macs.add(mac)
                  time.sleep(0.2)
      return(f'Total {count} devices pulled from PANW IoT Cloud.\n'
             f'Exported {len(unique_macs)} devices (with available mac addresses) to Aruba ClearPass')


  def main():
      global ARUBA_CP_FIELD_MAP
      increment_time = demisto.args().get('increment_time')
      sites = demisto.args().get('sites')
      tags = demisto.args().get('tags')
      custom_attributes = demisto.args().get('custom_attributes')
      if tags:
          tags = "Aruba Clearpass:In Scope"
      else:
          tags = None

      for attr in custom_attributes:
          if "exportattribute" in attr and attr['exportattribute']:
              ARUBA_CP_FIELD_MAP[attr['attributename']] = attr['panwiotcustomattribute']
      # return_outputs('ARUBA_CP_FIELD_MAP:'+str(ARUBA_CP_FIELD_MAP))
      if increment_time == None or increment_time == "":
          increment_time = "15"
      status_msg=""
      if bool(ARUBA_CP_FIELD_MAP):
          try:
              send_status_to_panw_iot_cloud("success", "Starting export to Aruba ClearPass")
              device_list = get_devices_from_panw_iot_cloud(increment_time, sites, tags)
              if device_list == None:
                  status_msg = "No new devices discovered. Nothing to export"
                  send_status_to_panw_iot_cloud("error", status_msg)
              else:
                  status_msg = send_panw_iot_devices_to_send_to_aruba_cp(device_list, None)
                  send_status_to_panw_iot_cloud("success", status_msg)
          except Exception as ex:
              send_status_to_panw_iot_cloud("error", "Failed to export devices to Aruba ClearPass %s" % str(ex))
              return_error(str(ex))
      else:
          status_msg='No custom attributes are selected to send to Aruba ClearPass.'
          send_status_to_panw_iot_cloud("error", status_msg)

      return_results(
          CommandResults(
              readable_output=status_msg,
              outputs_prefix="PaloAltoIoTIntegrationBase.Status",
              outputs=status_msg
          )
      )

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('SendPANWIoTDevicesToArubaClearPass', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- PANW IoT 3rd Party Integration
- Aruba ClearPass
timeout: 100800h0m0s
type: python
