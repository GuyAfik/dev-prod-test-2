args:
- name: job_data
  required: true
- isArray: true
  name: file_data
  required: true
commonfields:
  id: UploadFinishedTenableScanReportstoPANWIoTCloudV2
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: UploadFinishedTenableScanReportstoPANWIoTCloudV2
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('UploadFinishedTenableScanReportstoPANWIoTCloudV2', 'start', __line__())





  from typing import Dict, Any
  import traceback



  def upload_files_to_panw_iot_cloud(report_job_map, file_data):
      op_list = []
      err_list=[]
      if report_job_map == None or file_data == None:
          raise Exception("Invalid scan data or file data")
          return_error("Error: Invalid scans/No files passed for upload.")

      args_list = []
      for scan_id in report_job_map:
          job_data = report_job_map[scan_id]
          pdf_file = None
          csv_file = None
          csv_id = None
          pdf_id = None
          first_id = job_data[0].get('report_id', "")
          ip = job_data[0].get('ip', "")
          second_id = job_data[1].get('report_id', "")

          for file in file_data:
              if 'Name' in file and 'Info' in file and file['Size'] != 0:
                  name = file.get('Name')
                  info = file.get('Info')
                  extracted_format = None
                  if '/' in info:
                      extracted_format = info.split('/')[1]
                  else:
                      extracted_format = info
                  extracted_id = name.split('_')[1].split('.')[0]
                  if extracted_id == first_id or extracted_id == second_id:
                      if extracted_format == 'csv' or 'csv' in extracted_format:
                          csv_file = file.get('EntryID')
                          csv_id = extracted_id
                      elif extracted_format == 'pdf':
                          pdf_file = file.get('EntryID')
                          pdf_id = extracted_id


          args_list.append({'xml_file' : csv_file, 'pdf_file': pdf_file, 'pdf_id': pdf_id, 'ip': ip, 'scan_id':scan_id})

      results = {}


      for args in args_list:
          ip = args['ip']
          xml_file = args.get('xml_file')
          pdf_file = args.get('pdf_file')
          pdf_id=args.get('pdf_id')
          res = []

          if xml_file and pdf_file and pdf_id:
              if ip == 'multiIP':

                  #print("Uploading multiIP reports: "+str(args))

                  res = demisto.executeCommand("panw-iot-3rd-party-upload-vulnerability-scan-report", {
                      'xml_upload': xml_file,
                      'pdf_upload': pdf_file,
                      'scan_type': 'tenable',
                      'report_id': pdf_id,
                      'status': 'success',
                      'message': 'Uploading reports for scan:%s' % args['scan_id']
                  })

              else:
                  try:

                      #print("Uploading SingleIP reports: "+str(args))

                      res = demisto.executeCommand("panw-iot-3rd-party-upload-vulnerability-scan-report", {
                          'xml_upload': xml_file,
                          'pdf_upload': pdf_file,
                          'scan_type': 'tenable',
                          'report_id': pdf_id,
                          'status': 'success',
                          'message': 'Uploading reports for scan:%s' % args['scan_id'],
                          'ip': ip
                      })

                  except Exception as e:
                      print('Exception uploading ' + ip + ': ' + str(e))
          else:
              print("Cannot upload %s as one or more files are empty." %str(args))

          if res:
            if isError(res[0]):
                op_list.append(res[0]['Contents'])
                time.sleep(2)
                continue
            res_str = json.dumps(res[0]['Contents'])
            op_list.append(res[0])
          time.sleep(2)
      return op_list


  def main():
      job_data = demisto.args().get('job_data')

      file_data = demisto.args().get('file_data')

      try:
          op_list = upload_files_to_panw_iot_cloud(job_data, file_data)
          report_summary = {"Total Reports Uploaded": len(op_list)}
          results = CommandResults(
                      readable_output=tableToMarkdown("Upload Report Summary:", report_summary, removeNull=True),
                      outputs_prefix="Tenable.uploadFinishedTenableScanReportsToPANWIoTCloud"
              )
          return_results(results)
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute upload_files_to_panw_iot_cloud. Error: {str(ex)}')


  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()



  register_module_line('UploadFinishedTenableScanReportstoPANWIoTCloudV2', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
