args:
- description: Active Aruba Central Instance
  name: active_aruba_central_instance
- description: Get wired clients along with Wireless clients.
  name: get_wired_clients
- name: limit
commonfields:
  id: 5616fc46-082b-46ac-86d9-f1f317c8aed8
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SendArubaCentralDevicesToPANWIoT
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SendArubaCentralDevicesToPANWIoT', 'start', __line__())


  import json
  import traceback
  import time


  def send_status_to_panw_iot_cloud(status, msg, aruba_central_active_instance):
      """
      Reports status details back to PANW IoT Cloud.
      param status: Status (error, disabled, success) to be send to PANW IoT cloud.
      param msg: Debug message to be send to PANW IoT cloud.
      """
      resp = demisto.executeCommand("panw-iot-3rd-party-report-status-to-panw", {
          "status": status,
          "message": msg,
          "integration_name": "aruba_central",
          "playbook_name": "Import Aruba Central devices to PANW IoT cloud",
          "asset_type": 'device',
          "custom_integration_name": aruba_central_active_instance,
          "timestamp": int(round(time.time() * 1000))
        #   "using": PANW_IOT_INSTANCE
      })

      if isError(resp[0]):
          err_msg = f'Error, failed to send status to PANW IoT Cloud - {resp[0].get("Contents")}'
          raise Exception(err_msg)

  def send_devices_to_panw_iot_cloud(devices_list, retry=0):
      """
      Sends devices to PANW IoT Cloud.
      :type devices_list: ``array``
      :param devices_list: List of devices to be sent to PANW IoT cloud
      """
      res = ''
      resp = demisto.executeCommand("panw-iot-3rd-party-report-devices", {
          "DeviceData": devices_list,
          "pageLength": None,
          "IntegrationName": 'aruba_central'
        #   "using": PANW_IOT_INSTANCE
      })
      if isError(resp[0]):
          if retry == 0:
              time.sleep(1)
              return send_devices_to_panw_iot_cloud(devices_list, retry=1)
          err_msg = f'Error, could not send devices to PANW IoT Cloud - {resp[0].get("Contents")}'
          raise Exception(err_msg)
      if resp[0]['Contents']:
          res = resp[0]['Contents']
      return res

  def execute_get_all_clients(access_token, offset, limit, get_wired_clients):
      res = ''
      result = demisto.executeCommand("get-all-clients", {'access_token': access_token, 'get_wired_clients': get_wired_clients, 'limit': limit, 'offset': offset})
      if isError(result[0]):
          err_msg = f'Error, failed to get all clients from Aruba Central - {result[0].get("Contents")}'
          raise Exception(err_msg)
      return result[0]['Contents']

  def get_all_clients_and_send_to_PAN_IoT(access_token, get_wired_clients, limit):
      result, offset, count = '', 0, 0
      status_msg = ''
      macAddress = []
      limit = int(limit)
      if access_token:
          while True:
              client_data = ''
              mac = ''
              client_data = execute_get_all_clients(access_token, offset, limit, get_wired_clients)
              if isinstance(client_data, dict):
                  clients = client_data.get('clients', '')
                  if clients == '' or len(clients) == 0:
                      break
              else:
                  status_msg = 'Failed to get data from get-all-clients command'
                  return result, status_msg, count, macAddress
              resp = send_devices_to_panw_iot_cloud(clients)
              mac = [mac['deviceid'] for mac in clients]
              macAddress.append(mac)
              count += len(clients)
              demisto.info(f"Send {count} client successfully to PAN IoT Cloud")
              time.sleep(5)
              offset += limit
          status_msg = f'Successfully imported total {count} Aruba Central client to PANW IoT'
          return result, status_msg, count, macAddress
      status_msg = 'Access token is not available'
      demisto.error('Error while getting all clients '+ str(ex))
      return result, status_msg, count, macAddress

  def get_new_access_token(ACCESS_TOKEN_NAME):
      access_token = ''
      result = demisto.executeCommand("get-access-refresh-token", {'name': ACCESS_TOKEN_NAME})
      if isError(result[0]) or 'access_token' not in result[0]['Contents']:
          err_msg = f'Error, failed to get access token from Aruba Central - {result[0].get("Contents")}'
          raise Exception(err_msg)
      demisto.executeCommand("createList", {"listName":ACCESS_TOKEN_NAME,"listData":result[0]['Contents']})
      access_token = result[0]['Contents'].get('access_token', '')
      return access_token

  def fetch_access_token(token_data, ACCESS_TOKEN_NAME):
      fetch_token = demisto.executeCommand("fetch-access-token",{"token_data": token_data})
      if isError(fetch_token[0]) or 'access_token' not in fetch_token[0]['Contents']:
          err_msg = f'Error, failed to fetch access token from Aruba Central - {fetch_token[0].get("Contents")}'
          raise Exception(err_msg)
      if fetch_token[0]['Contents']:
          if fetch_token[0]['Contents'] != token_data:
              demisto.executeCommand("createList", {"listName":ACCESS_TOKEN_NAME,"listData":fetch_token[0]['Contents']})
          access_token = fetch_token[0]['Contents'].get('access_token', '')
      return access_token

  def execute_get_access_token_cmd(ACCESS_TOKEN_NAME):
      access_token = ''
      list_data = demisto.executeCommand("getList", {"listName":ACCESS_TOKEN_NAME})
      token_data = list_data[0]['Contents']
      if 'access_token' not in token_data:
          access_token = get_new_access_token(ACCESS_TOKEN_NAME)
          return access_token
      access_token = fetch_access_token(token_data, ACCESS_TOKEN_NAME)
      return access_token

  def main():
      aruba_central_active_instance = demisto.args().get("active_aruba_central_instance")
      ACCESS_TOKEN_NAME=aruba_central_active_instance+"_token"
      get_wired_clients = demisto.args().get("get_wired_clients")
      if get_wired_clients == 'true' or get_wired_clients == True:
          get_wired_clients = True
      else:
          get_wired_clients = False
      limit = demisto.args().get('limit')
      if limit is None or limit == '':
          limit = 1000
      try:
          access_token = execute_get_access_token_cmd(ACCESS_TOKEN_NAME)
          if access_token:
              result, status_msg, count, mac_address_list = get_all_clients_and_send_to_PAN_IoT(access_token, get_wired_clients, limit)
              send_status_to_panw_iot_cloud('success', status_msg, aruba_central_active_instance)

              status_reported_clients = {
                  "status": status_msg,
                  "reported-clients": mac_address_list
              }

              report_summary = {'Asset Type': 'Total Assets Reported'}
              report_summary.update({'Devices': count})
              return_results(
              CommandResults(
                  readable_output=tableToMarkdown("Asset Report Summary:", report_summary, removeNull=True),
                  outputs_prefix="aruba-central",
                  outputs=status_reported_clients
              )
          )
          else:
              return return_error('No access token')
      except Exception as ex:
          send_status_to_panw_iot_cloud("error", str(ex), aruba_central_active_instance)
          demisto.error(traceback.format_exc())
          return_error(str(ex))

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('SendArubaCentralDevicesToPANWIoT', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- PANW IoT 3rd Party Integration
- Aruba Central
timeout: 100800h0m0s
type: python
