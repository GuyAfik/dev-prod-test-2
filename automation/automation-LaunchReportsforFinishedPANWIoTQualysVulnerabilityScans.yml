args:
- description: Qualys Instance Name
  name: qualys_instance_name
  required: true
commonfields:
  id: LaunchReportsforFinishedPANWIoTQualysVulnerabilityScans
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: LaunchReportsforFinishedPANWIoTQualysVulnerabilityScans
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('LaunchReportsforFinishedPANWIoTQualysVulnerabilityScans', 'start', __line__())





  from typing import Dict, Any
  import traceback

  USING_QUALYS_INSTANCE_INSTANCE_INSTANCE = demisto.args().get('qualys_instance_name')
  def get_cache_scan_list():
      list_name = 'QualysLaunchedScans'
      res = demisto.executeCommand('getList', {'listName': list_name})
      if (
          not isinstance(res, list)
          or 'Contents' not in res[0]
          or not isinstance(res[0]['Contents'], str)
          or 'Item not found (8)' in res[0]['Contents']
      ):
          return 'Scan Cache QualysLaunchedScans is Empty'

      scan_refs = res[0]['Contents']
      scan_refs_list = [line.split(',') for line in scan_refs.split('\n')]
      return get_finished_scan_list(scan_refs_list[0])

  def get_finished_scan_list(launched_scan_list):
      finished_scan_list = []
      scan_map = {}
      for entry in launched_scan_list:
          if '_' in entry:
              scan_ref, scan_ip, scan_job = entry.split('_')
              scan_map[scan_ref] = {'ip': scan_ip, 'job': scan_job}
      if len(scan_map) == 0:
          return 'Scan Cache QualysLaunchedScans is Empty'

      res = demisto.executeCommand("qualys-vm-scan-list",
          {"show_ags":"1", "show_op":"1", "show_status":"1", "show_last":"0",
          'using':USING_QUALYS_INSTANCE_INSTANCE_INSTANCE})
      if isError(res):
          raise Exception(res[0]['EntryContext'])
      try:
          scan_list = res[0].get('EntryContext').get("Qualys.Scan(val.REF && val.REF == obj.REF)")
          if isinstance(scan_list, list) == False:
              scan_list = [scan_list]
          for scan in scan_list:
              ref = scan['REF']
              state = scan['STATUS']['STATE']
              if ref in scan_map and state == "Finished":
                  scan_cache_entry = ref+'_'+scan_map[ref]['ip']+'_'+scan_map[ref]['job']
                  finished_scan_list.append(scan_cache_entry)
                  # Info: Moved the deleting of scan cache entry after the reports are generated, so that we don't loose data in case of failures.
      except Exception as e:
          return "No Scans available on Qualys"
          # FIX ME: We get key errors when the scan list is empty, just return here
          raise Exception("Failed to get Scan List data %s" % str(e))

      if len(finished_scan_list) == 0:
          return 'No PANW IoT launched Scans are in Finished state'
      return launch_reporst_for_finished_scans(finished_scan_list)


  def report_launch_success(response):
      # Returns true if the launch was a success and false in case of error
      report_launch_success = False
      if isinstance(response, list) and len(response) != 0:
          scan_id = response[0].get("EntryContext", {}).get("Qualys.Report(val.ID && val.ID == obj.ID)").get("ID")
          report_launch_success = True if scan_id else False
      return report_launch_success


  def launch_reporst_for_finished_scans(scan_list):
      result_list = []
      template_id = None
      try:
          res = demisto.executeCommand("qualys-report-template-list", {'using':USING_QUALYS_INSTANCE_INSTANCE})
          templates = res[0]['EntryContext']
          template_list = templates.get("Qualys.ReportTemplate(val.ID && val.ID == obj.ID)")
          if template_list:
              for template in template_list:
                  if 'TITLE' in template and 'ID' in template:
                      if template.get('TITLE',"") == 'Technical Report':
                          template_id = template['ID']
                          demisto.info(f"Successfully get the Technical Report template ID: {template_id}")
                          break
      except Exception:
          demisto.error("Failed to get Qualys template list")
          raise Exception("Failed to get Qualys template list")
      if template_id == None:
          demisto.error("Failed to get Technical Report template ID")
          raise Exception("Failed to get Technical Report template ID.")

      for entry in scan_list:
          scan_ref, scan_ip, scan_job = entry.split('_')
          try:
              res = demisto.executeCommand("qualys-report-launch-scan-based-findings",
                  {"template_id":template_id,"output_format":"pdf","report_refs":scan_ref, "ips": scan_ip,
                      "report_title": "panw_iot_" + scan_ip + "_pdf_report_" + scan_job,
                      'using':USING_QUALYS_INSTANCE_INSTANCE})
              if isError(res) or not report_launch_success(res):
                  raise Exception("Failed to launch PDF report. Error details: " + str(res[0].get('EntryContext')))
              pdf_report_id = res[0].get('EntryContext').get("Qualys.Report(val.ID && val.ID == obj.ID)").get("ID")
              result_list.append('scan finished for %s - %s, PDF report launched with ID %s' % (scan_ip, scan_ref, pdf_report_id))
              # also add launched reports to cache
              demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations",
                  {"name":"QualysLaunchedReports","operation":"insert",
                   "value":pdf_report_id+"_"+scan_ip+"_"+scan_job})
              time.sleep(2)

              res = demisto.executeCommand("qualys-report-launch-scan-based-findings",
                  {"template_id":template_id,"output_format":"xml","report_refs":scan_ref, "ips": scan_ip,
                      "report_title": "panw_iot_" + scan_ip + "_xml_report_" + scan_job,
                      'using':USING_QUALYS_INSTANCE})
              if isError(res) or not report_launch_success(res):
                  raise Exception("Failed to launch XML report. Error details: " + str(res[0].get('EntryContext')))
              xml_report_id = res[0].get('EntryContext').get("Qualys.Report(val.ID && val.ID == obj.ID)").get("ID")
              # also add launched reports to cache
              result_list.append('scan finished for %s - % s, XML report launched with ID %s' % (scan_ip, scan_ref, xml_report_id))
              demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations",
                  {"name":"QualysLaunchedReports","operation":"insert",
                   "value":xml_report_id+"_"+scan_ip+"_"+scan_job})
              demisto.info("Successfully execute the command PANWIoTLaunchedVulnerabilityScanCacheOperations")
              time.sleep(2)
              demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations", {"name":"QualysLaunchedScans","operation":"delete","value":entry})
              demisto.info(f"Deleted the entry from cache for scan: {str(entry)}")

          except Exception as ex:
              demisto.error("Failed to launch Qualys report. Error details: "+str(ex))
              raise Exception("Failed to launch Qualys report. Error details: "+str(ex))
      return result_list

  def main():
      try:
          return_results(get_cache_scan_list())
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute Launch Reports for Finished Scans. Error: {str(ex)}')

  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()


  register_module_line('LaunchReportsforFinishedPANWIoTQualysVulnerabilityScans', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
