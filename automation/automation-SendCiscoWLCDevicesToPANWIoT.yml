args:
- name: panw_iot_3rd_party_instance
  required: true
- auto: PREDEFINED
  description: Type of device to fetch and send to PANW IoT cloud
  name: device_type
  predefined:
  - bluetooth
  - wifi
  - AP
  required: true
- name: cisco_wlc_instance
  required: true
commonfields:
  id: 832854c5-330c-49f0-85b3-318cea69d589
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/netmiko:1.0.0.23064
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SendCiscoWLCDevicesToPANWIoT
outputs:
- contextPath: cisco-wlc-IoT
  description: consist of status of the script and mac address of all the reported
    devices
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SendCiscoWLCDevicesToPANWIoT', 'start', __line__())




  """
  Fetches clients of cisco wlc and send it to the PANW-IoT
  """

  from typing import Dict, Any
  import traceback


  ''' STANDALONE FUNCTION '''

  ''' GLOBAL VARIABLES '''

  #PANW_IOT_INSTANCE = demisto.args().get('panw_iot_3rd_party_instance')
  CISCO_INSTANCE = demisto.args().get('cisco_wlc_instance')
  PAGE_SIZE = 100


  def send_status_to_panw_iot_cloud(status, msg):
      """
      Reports status details back to PANW IoT Cloud.
      param status: Status (error, disabled, success) to be send to PANW IoT cloud.
      param msg: Debug message to be send to PANW IoT cloud.
      """
      resp = demisto.executeCommand("panw-iot-3rd-party-report-status-to-panw", {
          "status": status,
          "message": msg,
          "integration_name": "cisco_wlc",
          "playbook_name": "Export Cisco WLC devices to PANW IoT cloud",
          "asset_type": 'device',
          "timestamp": int(round(time.time() * 1000)),
          "custom_integration_name": CISCO_INSTANCE
          # "using": PANW_IOT_INSTANCE
      })

      if isError(resp[0]):
          err_msg = f'Error, failed to send status to PANW IoT Cloud - {resp[0].get("Contents")}'
          raise Exception(err_msg)


  def send_devices_to_panw_iot_cloud(devices_list, device_type):
      """
      Sends devices to PANW IoT Cloud.
      :type devices_list: ``array``
      :param devices_list: List of devices to be sent to PANW IoT cloud
      """
      resp = demisto.executeCommand("panw-iot-3rd-party-report-devices", {
          "DeviceData": devices_list,
          "pageLength": None,
          "IntegrationName": 'cisco_wlc'
          # "using": PANW_IOT_INSTANCE
      })
      if isError(resp[0]):
          err_msg = f'Error, could not send {device_type} clients to PANW IoT Cloud - {resp[0].get("Contents")}'
          raise Exception(err_msg)
      else:
          # sending periodic status messages to PANW IoT paltform.
          status_msg = f'Successfully exported {len(devices_list)} Cisco WLAN Controller {device_type} clients to PANW IoT'
          send_status_to_panw_iot_cloud('success', status_msg)
      return resp[0]['Contents']


  def extract_device_data(cisco_wlc_client_output, device_type):
      '''
      Extract the device data from cisco wlc output data
      :type cisco_wlc_client_output: ``dict``
      :param cisco_wlc_client_output: output data from cisco-wlc-get-all-client-details command
      :return: Array of extracted devices which are connected to cisco wlc
      :rtype ``array``
      '''
      resp = demisto.executeCommand("panw-iot-3rd-party-extract-device-data", {
          "client": "cisco_wlc",
          "clientData": cisco_wlc_client_output
          # "using": PANW_IOT_INSTANCE
      })
      if isError(resp[0]):
          err_msg = f'Error, could not extract {device_type} clients - {resp[0].get("Contents")}'
          raise Exception(err_msg)
      return resp[0]['Contents']


  def get_devices_from_cisco_wlc(device_type):
      '''
      Get devices from Cisco WLAN Controller integration
      :return: dict containing data of the cisco wlc devices and access points
      :rtype ``dict``
      '''
      cmd_to_exec = ""
      if device_type == 'wifi':
          cmd_to_exec = "cisco-wlc-get-all-client-details"
      elif device_type == 'bluetooth':
          cmd_to_exec = "cisco-wlc-get-all-bluetooth-client-details"
      else:
          cmd_to_exec = "cisco-wlc-get-all-aps"
      resp = demisto.executeCommand(cmd_to_exec, {"using": CISCO_INSTANCE})
      if isError(resp[0]):
          err_msg = f'Error, could not get {device_type} clients from Cisco WLC - {resp[0].get("Contents")}'
          raise Exception(err_msg)

      return resp[0]['Contents']

  def format_ap_data(evtContent):

      """
      Format Access Point data before reporting to PAN.
      """
      res = []
      ap_data = evtContent.get('ap_list', '')
      if ap_data:
          for data in ap_data:
              ap_dict = {}
              ap_dict['ipAddress'] = data.get('apIPAddress', '')
              ap_dict['apModel'] = data.get('apModel', '')
              ap_dict['apName'] = data.get('apName', '')
              ap_dict['location'] = data.get('location', '')
              ap_dict['country'] = data.get('country', '')
              ap_dict['macAddress'] = data.get('ethernetMAC', '')
              ap_dict['apRadioMAC'] = data.get('radioMAC', '')
              ap_dict['apState'] = data.get('state', '')
              ap_dict['apSlots'] = data.get('slots', '')
              res.append(ap_dict)
      return res


  def export_cisco_wlc_devices_to_panw_iot(device_type):
      """
      Send cisco wlc clients to PANW IoT cloud
      """
      count = 0

      cisco_wlc_device_data = get_devices_from_cisco_wlc(device_type)

      devices_list = []
      mac_address_list = []
      if device_type == 'AP' and cisco_wlc_device_data:
          _source = cisco_wlc_device_data.get('_source', '')
          if _source:
              evtContent = _source.get('evtContent', '')
              if evtContent:
                  devices_list = format_ap_data(evtContent)
      elif device_type != 'AP' and cisco_wlc_device_data and len(cisco_wlc_device_data) != 0:
              devices_list = extract_device_data(cisco_wlc_device_data, device_type)

      if not devices_list or len(devices_list) == 0:
          status_msg = f"There are no Cisco WLAN Controller {device_type} clients connected to export"
          return status_msg, 0, []

      count = len(devices_list)
      device_sent = 0
      while device_sent != count:
          end_index = (device_sent + PAGE_SIZE) if (count - device_sent) > PAGE_SIZE else count
          sub_device_list = devices_list[device_sent:end_index]
          resp = send_devices_to_panw_iot_cloud(sub_device_list, device_type)
          time.sleep(5)
          device_sent = end_index

      mac_address_list = [client_data["macAddress"] for client_data in devices_list]

      status_msg = f'Successfully exported total {count} Cisco WLAN Controller {device_type} clients to PANW IoT'
      return status_msg, count, mac_address_list


  def main():
      status_msg = None
      try:
          device_type = demisto.args().get('device_type', 'wifi')
          if device_type not in ['bluetooth', 'wifi', 'AP']:
              device_type = 'wifi'

          status_msg, count, mac_address_list = export_cisco_wlc_devices_to_panw_iot(device_type)
          send_status_to_panw_iot_cloud("success", status_msg)

          status_reported_clients = {
              "status": status_msg,
              f"reported-{device_type}-clients": mac_address_list
          }
          report_summary = {'Asset Type': 'Total Assets Reported'}

          report_summary.update({'{} Devices'.format(device_type.upper()): count})
          return_results(
              CommandResults(
                  readable_output=tableToMarkdown("Asset Report Summary:", report_summary, removeNull=True),
                  outputs_prefix="cisco-wlc-iot",
                  outputs=status_reported_clients
              )
          )
      except Exception as ex:
          send_status_to_panw_iot_cloud("error", str(ex))
          demisto.error(traceback.format_exc())
          return_error(str(ex))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('SendCiscoWLCDevicesToPANWIoT', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- PANW IoT 3rd Party Integration
- Cisco WLAN Controller
timeout: 100800h0m0s
type: python
