args:
- description: Local Entry IP
  name: local_entry_ip
  required: true
- description: Network Discovery instance name
  name: nd_instance
  required: true
commonfields:
  id: NDSNMPServiceDNS
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: NDSNMPServiceDNS
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('NDSNMPServiceDNS', 'start', __line__())



  import socket
  import re

  NETWORK_DISCOVERY_INSTANCE = demisto.args().get("nd_instance")
  VENDOR_CISCO = "cisco"
  VENDOR_ARUBAOS = "arubaos"
  VENDOR_ARISTA = "arista"
  VENDOR_CISCO_AIREOS_WLC = "controller"


  # *************** DNS SERVER OIDs ***************
  CISCO_ROUTER_DNS_CLIENT_DNSSERVER_IPADDR_OID   = '1.3.6.1.4.1.9.9.436.1.1.4.1.3'
  SYS_DESC_OID  = '1.3.6.1.2.1.1.1'

  def remove_prefix(text, oid_prefix):
      if text.startswith(oid_prefix):
          return text[len(oid_prefix):]
      return text

  def walk(ip,oid):
      response = demisto.executeCommand("nd-snmp-v2-walk-command", {
          "ip":ip,
          "oid": oid,
          "using": NETWORK_DISCOVERY_INSTANCE
      })
      if isError(response[0]):
          err_msg = 'Error, couldn\'t snmp v2 walk - '+str(response[0]['Contents'])
          raise Exception(err_msg)
      return response[0]['Contents']


  def get_cisco_dns_info(host):
      cisco_dns_list = []
      # SNMP Walk to get Cisco DNS Client DNS Server IP address info
      raw_result = walk(host, CISCO_ROUTER_DNS_CLIENT_DNSSERVER_IPADDR_OID)
      for k, v in raw_result.items():
          dns_ipaddr = '.'.join(v.strip().split('.')[-4:])
          if dns_ipaddr != "0.0.0.0":
              intf_address = '.'.join(k.strip().split('.')[-4:])
              cisco_dns_list.append(dns_ipaddr)

      return cisco_dns_list

  def get_vendor(host):
      try:
          raw_result = walk(host, SYS_DESC_OID)
          for k, v in raw_result.items():
              sys_desc = get_str_from_hex(v)
              if re.search(VENDOR_CISCO, sys_desc, re.IGNORECASE):
                  if re.search(VENDOR_CISCO_AIREOS_WLC, sys_desc, re.IGNORECASE):
                      return VENDOR_CISCO_AIREOS_WLC
                  else:
                      return VENDOR_CISCO
              elif re.search(VENDOR_ARUBAOS, sys_desc, re.IGNORECASE):
                  return VENDOR_ARUBAOS
              elif re.search(VENDOR_ARISTA, sys_desc, re.IGNORECASE):
                  return VENDOR_ARISTA
              else:
                  return "NA"
      except Exception as ex:
          raise Exception("NDSNMPServiceDNS - Exception while retrieving vendor for host "+ str(host) +" and the error is:" + str(ex))

  def get_dns_list(host):
      # Get Vendor Specific information
      dns_list=[]
      vendor = get_vendor(host)
      # return_outputs("Vendor: "+str(vendor))
      # Get Vendor specific DHCP info
      if vendor == VENDOR_CISCO:
          return get_cisco_dns_info(host)
      # Return the result
      return dns_list

  def get_dns_info(host):
      result_map = {}
      # result_map["Node"] = host
      # Get DHCP Helper info
      result_map["dns_ip_list"] = get_dns_list(host)
      return result_map

  def get_str_from_hex(val):
      #Check if the string starts with 0x then convert it to utf-8
      if val.startswith('0x'):
          try:
              ver = bytes.fromhex(remove_prefix(val, '0x')).decode('utf-8')
          except:
              ver = val
      else:
          ver = val
      return ver

  def main():
      try:

          LOCAL_ENTRY_IP = demisto.args().get('local_entry_ip')
          dns_info = get_dns_info(LOCAL_ENTRY_IP)
          return_results(dns_info)

      except Exception as e:
          raise Exception("Failed to get Node DNS data for :"+str(LOCAL_ENTRY_IP)+" and the error is :"+str(e))

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('NDSNMPServiceDNS', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
