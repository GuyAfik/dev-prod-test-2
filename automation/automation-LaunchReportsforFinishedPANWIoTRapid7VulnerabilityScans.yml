args:
- name: rapid7_instance
  required: true
commonfields:
  id: LaunchReportsforFinishedPANWIoTRapid7VulnerabilityScans
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: LaunchReportsforFinishedPANWIoTRapid7VulnerabilityScans
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('LaunchReportsforFinishedPANWIoTRapid7VulnerabilityScans', 'start', __line__())



  from typing import Dict, Any
  import traceback

  USING_RAPID7_INSTANCE = demisto.args().get('rapid7_instance')

  def get_cache_scan_list():
      list_name = 'Rapid7LaunchedScans'
      res = demisto.executeCommand('getList', {'listName': list_name})
      if (
          not isinstance(res, list)
          or 'Contents' not in res[0]
          or not isinstance(res[0]['Contents'], str)
          or 'Item not found (8)' in res[0]['Contents']
      ):
          return 'Scan Cache Rapid7LaunchedScans is Empty'

      scan_refs = res[0]['Contents']
      # return_outputs(scan_refs)
      scan_refs_list = [line.split(',') for line in scan_refs.split('\n')]
      return get_finished_scan_list(scan_refs_list[0])

  def get_finished_scan_list(launched_scan_list):
      finished_scan_list = []
      scan_map = {}
      for entry in launched_scan_list:
          if '_' in entry:
              scan_ref, scan_ip, scan_job = entry.split('_')
              scan_map[int(scan_ref)] = {'ip': scan_ip, 'job': scan_job}
      if len(scan_map) == 0:
          return 'Scan Cache Rapid7LaunchedScans is Empty'
      scan_id_list = list(scan_map.keys())
      # return_outputs(scan_id_list)
      res = demisto.executeCommand("nexpose-get-scan",
          {'id':scan_id_list,
          'using':USING_RAPID7_INSTANCE})
      # return_outputs(res)
      if isError(res):
          raise Exception(res[0]['Contents'])
      try:
          # return_outputs(isinstance(res, list))
          for each_res in res:
              scan_list = each_res['Contents']
              # return_outputs(isinstance(scan_list, list))
              if isinstance(scan_list, list) == False:
                  scan_list = [scan_list]
              for scan in scan_list:
                  ref = scan['id']
                  state = scan['status']
                  return_outputs(str(ref)+":"+state)
                  if ref in scan_map and state == "finished":
                      scan_cache_entry = str(ref)+'_'+scan_map[ref]['ip']+'_'+scan_map[ref]['job']
                      finished_scan_list.append(scan_cache_entry)
                      demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations",
                          {"name":"Rapid7LaunchedScans","operation":"delete","value":scan_cache_entry})
      except Exception as e:
          return "No Scans available on Rapid7"+str(e)
          # FIX ME: We get key errors when the scan list is empty, just return here
          raise Exception("Failed to get Scan List data %s" % str(e))

      if len(finished_scan_list) == 0:
          return 'No PANW IoT launched Scans are in Finished state'
      return_outputs(finished_scan_list)
      return launch_reports_for_finished_scans(finished_scan_list)

  def launch_reports_for_finished_scans(scan_list):
      result_list = []
      for entry in scan_list:
          scan_ref, scan_ip, scan_job = entry.split('_')
          try:
              res = demisto.executeCommand("nexpose-create-scan-report",
                  {"scan":int(scan_ref),"template":"audit-report","format":"pdf", "download_immediately": "false",
                      "name": "panw_iot_" + scan_ip + "_pdf_report_" + str(scan_job),
                      'using':USING_RAPID7_INSTANCE})
              if isError(res):
                  raise Exception(res[0]['Contents'])

              pdf_report_id = res[0]['Contents']['ID']
              pdf_instance_id=res[0]['Contents']['InstanceID']
              result_list.append('scan finished for %s - %s, PDF report launched with ID %s and Instance ID %s' % (scan_ip, str(scan_ref), str(pdf_report_id), str(pdf_instance_id)))
              # also add launched reports to cache
              # return_outputs(result_list)
              # demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations",
              #     {"name":"Rapid7LaunchedReports","operation":"insert",
              #      "value":str(pdf_report_id)+"_"+str(pdf_instance_id)+"_pdf_"+scan_ip+"_"+str(scan_job)})
              pdf_report_value = str(pdf_report_id)+"_"+str(pdf_instance_id)+"_pdf_"+scan_ip+"_"+str(scan_job)
              time.sleep(2)

              res = demisto.executeCommand("nexpose-create-scan-report",
                  {"scan":int(scan_ref),"template":"basic-vulnerability-check-results","format":"csv-export", "download_immediately": "false",
                      "name": "panw_iot_" + scan_ip + "_csv_report_" + str(scan_job),
                      'using':USING_RAPID7_INSTANCE})
              if isError(res):
                  raise Exception(res[0]['Contents'])
              csv_report_id = res[0]['Contents']['ID']
              csv_instance_id=res[0]['Contents']['InstanceID']
              # also add launched reports to cache
              result_list.append('scan finished for %s - % s, CSV report launched with ID %s and instanceID %s' % (scan_ip, str(scan_ref), str(csv_report_id), str(csv_instance_id)))
              # demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations",
              #     {"name":"Rapid7LaunchedReports","operation":"insert",
              #      "value":str(csv_report_id)+"_"+str(csv_instance_id)+"_csv_"+scan_ip+"_"+str(scan_job)})
              csv_report_value = str(csv_report_id)+"_"+str(csv_instance_id)+"_csv_"+scan_ip+"_"+str(scan_job)
              time.sleep(2)
              report_value=""
              if pdf_report_value!="" and csv_report_value!="":
                  report_value=str(csv_report_value)+"|"+str(pdf_report_value)
              elif pdf_report_value!="":
                  report_value=pdf_report_value
              elif csv_report_value !="":
                  report_value=csv_report_value
              demisto.executeCommand("PANWIoTLaunchedVulnerabilityScanCacheOperations",
                      {"name":"Rapid7LaunchedReports","operation":"insert",
                       "value":report_value})
              time.sleep(2)
          except Exception as e:
              raise Exception("Failed to launch Rapid7 report"+str(e))
      return result_list

  def main():
      try:
          return_results(get_cache_scan_list())
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute AddKeyToList. Error: {str(ex)}')

  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('LaunchReportsforFinishedPANWIoTRapid7VulnerabilityScans', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- nexpose
timeout: 100800h0m0s
type: python
