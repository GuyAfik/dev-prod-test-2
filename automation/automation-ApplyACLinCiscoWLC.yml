args:
- description: Name of the ACL to apply
  name: aclName
  required: true
- description: Cisco instances on which acl will be applied
  isArray: true
  name: ciscoInstances
  required: true
- description: ACL rule to add in cisco instance
  isArray: true
  name: aclContents
  required: true
comment: Apply ACL in Cisco WLC
commonfields:
  id: 1d46f200-06e7-4b1b-8a4c-a1a54d9739ff
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ApplyACLinCiscoWLC
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ApplyACLinCiscoWLC', 'start', __line__())




  """
  This script apply ACL to all the instances provided in the argument
  """

  from typing import Dict, Any
  import traceback



  ''' GLOBAL Arguments '''
  #PANW_IOT_INSTANCE = demisto.args().get('panw_iot_3rd_party_instance')


  ''' STANDALONE FUNCTION '''


  def send_status_to_panw_iot_cloud(status, msg, cisco_instance):
      """
      Reports status details back to PANW IoT Cloud.
      :param status: Status (error, disabled, success) to be send to PANW IoT cloud.
      :param msg: Debug message to be send to PANW IoT cloud.
      :param cisco_instance: Instance name of the cisco_wlc for which error is sent.
      """
      demisto.log(f'{status} : {msg}')
      resp = demisto.executeCommand("panw-iot-3rd-party-report-status-to-panw", {
          "status": status,
          "message": msg,
          "integration_name": "cisco_wlc",
          "playbook_name": "Export Cisco WLC devices to PANW IoT cloud",
          "asset_type": 'device',
          "timestamp": int(round(time.time() * 1000)),
          "custom_integration_name": cisco_instance
          # "using": PANW_IOT_INSTANCE
      })

      if isError(resp[0]):
          err_msg = f'Error, failed to send status to PANW IoT Cloud - {resp[0].get("Contents")}'
          raise Exception(err_msg)


  def apply_acl(acl_name, acl_contents, cisco_instance):
      '''
      Add and apply ACL in provided cisco wlc instance.
      :type acl_name: ``str``
      :param acl_name: Name of the ACL to add in cisco wlc
      :type acl_contents: ``str``
      :param acl_contents: Rules to add in given ACL name
      :type cisco_instance: ``str``
      :param cisco_instance: Instance name of the cisco_wlc in which ACL will be applied.
      '''
      resp = demisto.executeCommand("cisco-wlc-apply-acl", {
          "aclName": acl_name,
          "aclContentList": acl_contents,
          "using": cisco_instance
      })

      if isError(resp[0]):
          err_msg = f'Error, could not apply ACL {acl_name} to {cisco_instance} - {resp[0].get("Contents")}'
          raise Exception(err_msg)

  ''' MAIN FUNCTION '''


  def main():
      exp_raised_once = False
      try:
          cisco_instances = argToList(demisto.args().get('ciscoInstances'))
          acl_name = demisto.args().get('aclName')
          acl_contents = demisto.args().get('aclContents')
          for cisco_instance in cisco_instances:
              try:
                  apply_acl(acl_name, acl_contents, cisco_instance)
                  send_status_to_panw_iot_cloud("success", f'Successfully applied ACL {acl_name} on {cisco_instance}', cisco_instance)
              except Exception as ex:
                  send_status_to_panw_iot_cloud("error", str(ex), cisco_instance)
                  exp_raised_once = True
                  raise ex

          rp_data = {
              "ACL Name" : acl_name,
              "No. of ACL applied on Cisco Instance" : len(cisco_instances)
          }
          return_results(CommandResults(readable_output=tableToMarkdown("ACL apply summary:", rp_data, removeNull=True)))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          if not exp_raised_once:
              send_status_to_panw_iot_cloud("error", str(ex), "")
          demisto.setContext('cisco-wlc-IoT.aclStatus', str(ex))
          return_error(str(ex))


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ApplyACLinCiscoWLC', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- Cisco WLAN Controller
- PANW IoT 3rd Party Integration
timeout: 1h0m0s
type: python
