args:
- description: Local Entry IP
  name: local_entry_ip
  required: true
- description: Network Discovery instance name
  name: nd_instance
  required: true
commonfields:
  id: NDSNMPTopologyEndpoints
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: NDSNMPTopologyEndpoints
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('NDSNMPTopologyEndpoints', 'start', __line__())


  from pysnmp.hlapi import *
  import socket
  import re


  NETWORK_DISCOVERY_INSTANCE=demisto.args().get("nd_instance")
  DOT = '.'
  # ***************** IP Interface Functions*************
  # Below two OIDs for VLAN Subnet discovery
  IF_IDX_TO_IF_NAME_OID               = '1.3.6.1.2.1.31.1.1.1.1'
  IF_IDX_TO_IF_DESC_OID               = '1.3.6.1.2.1.2.2.1.2'
  IF_IDX_TO_IP_ADDR_OID               = '1.3.6.1.2.1.4.20.1.2'
  IF_IDX_TO_MAC_ADDRESS_OID           = '1.3.6.1.2.1.2.2.1.6'
  CISCO_TRUNK_STATUS_OID = '1.3.6.1.4.1.9.9.46.1.6.1.1.14'
  STD_TAGGED_AND_UNTAGGED_PORTS_OID = '1.3.6.1.2.1.17.7.1.4.2.1.4'
  STD_UNTAGGED_PORTS_PORTS_OID = '1.3.6.1.2.1.17.7.1.4.2.1.5'

  SYS_DESC_OID  = '1.3.6.1.2.1.1.1'
  VENDOR_CISCO = "cisco"
  VENDOR_ARUBAOS = "arubaos"
  VENDOR_ARISTA = "arista"
  VENDOR_CISCO_AIREOS_WLC = "controller"
  IF_INDEX = "intf_index"
  IF_NAME = "intf_name"
  IF_IP4_ADDR = "intf_ipv4_addr"
  IF_MAC_ADDR = "intf_mac_addr"
  IF_OPER_STATUS = "intf_operational_status"
  VLAN_ID = "vlan_id"


  # *************** Get Endpoints Information *********************
  SWITCH_NAME_OID = '1.3.6.1.2.1.1.5'
  MAC_IP_PAIR_OID = '1.3.6.1.2.1.4.22.1.2'
  VLAN_LIST_OID = '1.3.6.1.4.1.9.9.46.1.3.1.1.2'
  MAC_BRIDGE_PORT_OID = '1.3.6.1.2.1.17.4.3.1.2'
  BRIDGE_PORT_IFNAME_OID = '1.3.6.1.2.1.17.1.4.1.2'
  IFNAME_ACTUAL_PORT_OID = '1.3.6.1.2.1.31.1.1.1.1'
  CDP_OID = '1.3.6.1.4.1.9.9.23.1.2.1.1.4'
  LLDP_OID = '1.0.8802.1.1.2.1.4.2.1'
  CDP_VLAN_LIST_OID = '1.3.6.1.4.1.9.9.46.1.3.1.1.2'
  LLDP_VLAN_LIST_OID = '1.3.6.1.2.1.17.7.1.4.2.1.3'


  def get_mac_actual_port_map(host):
      response = demisto.executeCommand("nd-snmp-get-phys-port-command", {
          "ip":host,
          "execution-timeout":864000,
          "using": NETWORK_DISCOVERY_INSTANCE
      })
      if isError(response[0]):
          err_msg = 'Error, couldn\'t execute nd-snmp-get-phys-port-command - '+str(response[0]['Contents'])
          raise Exception(err_msg)
      return response[0]['Contents']

  def walk(ip,oid):
      response = demisto.executeCommand("nd-snmp-v2-walk-command", {
          "ip":ip,
          "oid": oid,
          "using": NETWORK_DISCOVERY_INSTANCE
      })
      if isError(response[0]):
          err_msg = 'Error, couldn\'t complete snmp v2 walk - '+str(response[0]['Contents'])
          raise Exception(err_msg)
      return response[0]['Contents']

  def get_mac_ip_map(host, oid):
      result = {}
      try:
          raw_result = walk(host, oid)
          if raw_result:
              for k, v in raw_result.items():
                  raw_ip = k.split(DOT)[-4:]
                  ip = DOT.join(raw_ip)
                  raw_mac = v[2:]
                  mac = ':'.join(a+b for a,b in zip(raw_mac[::2], raw_mac[1::2]))
                  result[mac] = ip
      except Exception as ex:
          print(ex)
      return result

  def get_switch_name(host, oid):
      switch_name = ""
      try:
          raw_result = walk(host, oid)
          if raw_result:
              for k, v in raw_result.items():
                  return v
      except Exception as e:
          if 'timeout' in str(e):
              return switch_name
          else:
              raise Exception("Failed to get Switch data: %s" % str(e))
          #traceback.print_exc()
      return switch_name

  def get_endpoints_info(host):
      ENDPOINT_COUNT = set()
      result_map = {}
      # Get Switch Name
      switch_name = get_switch_name(host, SWITCH_NAME_OID)
      # Get MAC - IP pairs
      mac_ip_map = get_mac_ip_map(host, MAC_IP_PAIR_OID)
      # Get the ports for the MACs
      mac_port_map = get_mac_actual_port_map(host)
      if mac_port_map:
          if type(mac_port_map) is dict:
              for mac, [port, isAccess] in mac_port_map.items():
                  if not is_mac_address(mac):
                      continue
                  if mac not in result_map:
                      result_map[mac] = {}
                  result_map[mac]["deviceid"] = mac
                  if isAccess:
                      result_map[mac]["snmpIsAccessPort"] = True #isAccess
                  result_map[mac]["switchPort"] = port
                  result_map[mac]["switchName"] = switch_name
                  result_map[mac]["switchIP"] = host
                  ENDPOINT_COUNT.add(mac)

      if mac_ip_map:
          if type(mac_ip_map) is dict:
              for mac, ip in mac_ip_map.items():
                  if not is_mac_address(mac):
                      continue
                  if mac not in result_map:
                      result_map[mac] = {}
                  result_map[mac]["deviceid"] = mac
                  result_map[mac]["connect_evtContent.ip"] = ip
                  result_map[mac]["switchName"] = switch_name
                  result_map[mac]["switchIP"] = host
                  #result_map[mac]["snmpIsAccessPort"] = True
                  ENDPOINT_COUNT.add(mac)

      return {"endpoints":result_map}

  def main():
      try:
          ENTRY_IP = demisto.args().get('local_entry_ip')
          endpoints_info = get_endpoints_info(ENTRY_IP)
          return_results(endpoints_info)

      except Exception as e:
          raise Exception("Failed to get Endpoints data: %s" % str(e))



  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('NDSNMPTopologyEndpoints', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
