args:
- name: name
  required: true
- auto: PREDEFINED
  name: operation
  predefined:
  - insert
  - delete
  required: true
- name: value
  required: true
comment: List operations, will create a new list if list does not exist
commonfields:
  id: 546f3d11-a5cf-488e-8952-87e66e17e951
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/panw-iot:1.0.0.79918
enabled: true
engineinfo: {}
mainengineinfo: {}
name: PANWIoTLaunchedVulnerabilityScanCacheOperationsForTenable
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('PANWIoTLaunchedVulnerabilityScanCacheOperationsForTenable', 'start', __line__())





  from typing import Dict, Any
  import traceback


  def panw_iot_list_command(args):
      list_name = args.get('name')
      operation = args.get('operation')
      value = args.get('value')

      if list_name == 'TenableLaunchedScans':
          scan_id, scan_uuid, scan_ip, scan_job = value.split('_')

      if list_name == 'TenableLaunchedReports':
          scan_id, scan_uuid, scan_ip, scan_job, scan_format= value.split('_')

      list_exists = True

      if all([scan_id, scan_uuid, scan_ip, scan_job]) or all([scan_id, scan_uuid, scan_ip, scan_job, scan_format]):

          res = demisto.executeCommand('getList', {'listName': list_name})
          if (
              not isinstance(res, list)
              or 'Contents' not in res[0]
              or not isinstance(res[0]['Contents'], str)
              or 'Item not found (8)' in res[0]['Contents']
          ):
              list_exists = False


          if list_exists == False:
              if operation == 'delete':
                  return 'List does not exist'
              else:
                  res = demisto.executeCommand('createList', {'listName': list_name, 'listData': value})

          else:
              if operation == 'delete':
                  res = demisto.executeCommand('removeFromList', {'listName': list_name, 'listData': value})
              else:
                  res = demisto.executeCommand('addToList', {'listName': list_name, 'listData': value})

          return res[0]['Contents']

      else:
          return_error(f'Failed to execute AddKeyToList. Error: Value entered is incomplete')


  def main():
      try:
          return_results(panw_iot_list_command(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute AddKeyToList. Error: {str(ex)}')


  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('PANWIoTLaunchedVulnerabilityScanCacheOperationsForTenable', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
