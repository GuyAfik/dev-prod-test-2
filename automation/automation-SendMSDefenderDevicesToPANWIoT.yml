args:
- description: Active MS Defender XDR Instance
  name: active_defender_instance
  required: true
commonfields:
  id: SendMSDefenderDevicesToPANWIoT
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.89873
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SendMSDefenderDevicesToPANWIoT
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SendMSDefenderDevicesToPANWIoT', 'start', __line__())



  import json
  import traceback
  import time
  import uuid
  import re
  from datetime import datetime, timedelta


  DEFENDER_ACTIVE_INSTANCE = demisto.args().get("active_defender_instance")

  def sendStatusToPanwIotCloud(status, msg):
      """
      Reports status details back to PANW IoT Cloud.
      param status: Status (error, disabled, success) to be send to PANW IoT cloud.
      param msg: Debug message to be send to PANW IoT cloud.
      """
      res = ""
      count = 0
      while True:
          count += 1
          resp = demisto.executeCommand(
              "panw-iot-3rd-party-report-status-to-panw",
              {
                  "status": status,
                  "message": msg,
                  "integration_name": "ms_defender_xdr",
                  "playbook_name": "Import MS Defender devices to PANW IoT cloud",
                  "asset_type": "device",
                  "custom_integration_name": DEFENDER_ACTIVE_INSTANCE,
                  "timestamp": int(round(time.time() * 1000))
              },
          )
          if isError(resp[0]):
              if count < 6:
                  time.sleep(2)
              else:
                  errMsg = f'Error, failed to send status to PANW IoT Cloud - {resp[0].get("Contents")}'
                  raise Exception(errMsg)
          else:
              break
      if isinstance(resp, list):
          res = resp[0].get("Contents",None)
      demisto.debug(f"Successfully send status to PAN IoT API:- {res}")
      return res

  def sendDevicesToPANWIotCloud(deviceList, retry=0):
      """
      Sends devices to PANW IoT Cloud.
      :type deviceList: ``array``
      :param deviceList: List of devices to be sent to PANW IoT cloud
      """
      res = ""
      count = 0
      while True:
          count += 1
          res = ""
          resp = demisto.executeCommand("panw-iot-3rd-party-report-devices", {
              "DeviceData": deviceList,
              "pageLength": None,
              "IntegrationName": 'microsoft_defender_xdr'
            #   "using": PANW_IOT_INSTANCE
          })
          if isError(resp[0]):
              if count < 6:
                  time.sleep(2)
              else:
                  errMsg = f'Error, could not send devices to PANW IoT Cloud - {resp[0].get("Contents")}'
                  raise Exception(errMsg)
          else:
              break
      if isinstance(resp, list):
          res = resp[0].get("Contents",None)
      demisto.debug(f"Successfully send devices to PAN IoT API:- {res}")
      return res

  def executeGetAllDevices(accessToken, offset, limit):
      res = ''
      result = demisto.executeCommand("ms-defender-get-all-devices", {'token': accessToken, 'limit': limit, 'offset': offset, "using": DEFENDER_ACTIVE_INSTANCE})
      if isError(result[0]):
          errMsg = f'Error, failed to get all devices from MS Defender - {result[0].get("Contents")}'
          raise Exception(errMsg)
      demisto.debug(f"Successfully get all devices from MS Defender API")
      return result[0]['Contents']

  def getAllDevicesAndSendToPANIoT(accessToken):
      offset, count = 0, 0
      totalDevicesUpserted=0
      totalDevicesUpdated=0
      statusMsg, deviceInfo = '', {}
      macAddress = []
      limit = 1000
      if accessToken:
          while True:
              deviceData = ''
              devicesUpdated, devicesUpserted = 0, 0
              mac = ''
              deviceData = executeGetAllDevices(accessToken, offset, limit)
              if isinstance(deviceData, dict):
                  data = deviceData.get('data', '')
                  if data == '' or len(data) == 0:
                      break
              else:
                  statusMsg = 'Failed to get device data from ms-defender-get-all-devices command'
                  return statusMsg, count, macAddress, deviceInfo
              resp = sendDevicesToPANWIotCloud(deviceData.get("data"))
              if resp and isinstance(resp, dict):
                  devicesUpdated = resp.get('updatedDeviceNum')
                  devicesUpserted = resp.get('upsertedDeviceNum')
              totalDevicesUpserted += devicesUpserted
              totalDevicesUpdated += devicesUpdated
              mac = [mac['deviceid'] for mac in deviceData.get("data")]
              macAddress.append(mac)
              count += len(deviceData.get("data"))
              demisto.info(f"Send {count} devices successfully to PAN IoT Cloud")
              time.sleep(5)
              offset += limit
          statusMsg = f'Successfully imported total {count} MS Defender devices to PANW IoT'
          demisto.debug(f'Successfully imported total {count} MS Defender devices to PANW IoT')
          deviceInfo = {
              'Total Device Upserted' : totalDevicesUpserted,
              'Total Device Updated' : totalDevicesUpdated
          }
          return statusMsg, count, macAddress, deviceInfo
      statusMsg = 'Access token is not available'
      demisto.error('Error while getting all devices '+ str(ex))
      return statusMsg, count, macAddress, deviceInfo

  def getNewAccessToken(accessTokenName):
      demisto.debug("Creating a new token")
      accessToken = ""
      result = demisto.executeCommand("ms-defender-generate-token", {"name": accessTokenName})
      if isinstance(result, list) and len(result) != 0:
          if isError(result[0]) or "access_token" not in result[0].get("Contents", None):
              errMsg = f'Error, failed to generate access token from MS Defendner - {result[0].get("Contents")}'
              raise Exception(errMsg)
          listData = result[0].get("Contents", None)
          if listData:
              demisto.executeCommand("createList", {"listName": accessTokenName, "listData": [listData]})
              accessToken = listData.get("access_token", "")
              demisto.debug("Successfully generated access token from MS Defender API")
      return accessToken

  def validateAccessToken(tokenData):
      """
      Function will check the given access token is expired or not
      """
      accessToken = ''
      tokenData = json.loads(tokenData)
      expire = datetime.fromtimestamp(int(tokenData[0].get("expires_on")))
      # Get current datetime
      currentTime = datetime.now()
      # Calculate the time difference
      if expire > currentTime:
          accessToken = tokenData[0].get("access_token")
          demisto.debug("Successfully validated the access token")
      return accessToken

  def executeGetAccessTokenCmd(accessTokenName):
      """
      Function will fetch the access token
      """
      accessToken = ""
      listData = demisto.executeCommand("getList", {"listName": accessTokenName})
      if isinstance(listData, list) and len(listData) != 0:
          tokenData = listData[0].get("Contents", None)
          if tokenData:
              if "Item not found" not in tokenData:
                  accessToken = validateAccessToken(tokenData)
              if accessToken:
                  return accessToken
              accessToken = getNewAccessToken(accessTokenName)
      demisto.debug(f"Successfully get the access token:- {accessToken}")
      return accessToken


  def main():
      accessTokenName = DEFENDER_ACTIVE_INSTANCE + "_token"
      try:
          accessToken = executeGetAccessTokenCmd(accessTokenName)
          if accessToken:
              statusMsg, count, macAddress, deviceInfo = getAllDevicesAndSendToPANIoT(accessToken)
              if "Successfully" in statusMsg:
                  sendStatusToPanwIotCloud("success", statusMsg)
              else:
                  sendStatusToPanwIotCloud("error", statusMsg)
              statusReportedClients = {
                  "status": statusMsg,
                  "reported-clients": macAddress
              }
              reportSummary = {"Total Device Reported": count}
              reportSummary.update(deviceInfo)
              return_results(
                  CommandResults(
                      readable_output=tableToMarkdown("Asset Report Summary:", reportSummary, removeNull=True),
                      outputs_prefix="ms_defender_xdr",
                      outputs=statusReportedClients
                  )
              )
          else:
              return return_error("No access token")
      except Exception as ex:
          sendStatusToPanwIotCloud("error", str(ex))
          demisto.error(traceback.format_exc())
          return_error(str(ex))

  if __name__ in ("__main__", "__builtin__", "builtins"):
      main()


  register_module_line('SendMSDefenderDevicesToPANWIoT', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
timeout: 100800h0m0s
type: python
